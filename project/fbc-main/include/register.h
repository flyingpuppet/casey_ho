// ----------------------------------------------------------------------
// This file is automatically generated from the script:
//
// ./create_headers_from_register_map_h.pl
//
// and was applied to the file
//
// ./register_map.h
//
// DO NOT EDIT!!!!!
// ----------------------------------------------------------------------
//
#ifdef REGISTER_H
#else
#define REGISTER_H

//#define Wr(addr, data) *(volatile unsigned long *)((0x80030000)|((addr)<<2))=(data)
//#define Rd(addr) *(volatile unsigned long *)((0x80030000)|((addr)<<2))
static void Wr(unsigned int addr, unsigned int data)
{
	*(volatile unsigned long *)((0x80030000)|((addr)<<2))=(data);
	_ASM("sync");
}
static unsigned int Rd(unsigned int addr)
{
	_ASM("sync");
	return *(volatile unsigned long *)((0x80030000)|((addr)<<2));
}


#define Wr_reg_bits(reg, val, start, len) \
  Wr(reg, ((Rd(reg) & ~(((1L<<(len))-1)<<(start))) | ((unsigned int)(val) << (start))))
#define Rd_reg_bits(reg, start, len) \
  ((Rd(reg) >> (start)) & (( 1L << (len)) - 1))
//
// Reading file:  ./register_map.h
//
// -----------------------------------------------
// Copyright (c) 1997, 1998, AMLOGIC, Inc.
// All rights reserved.
//
// Description:
//
// Input      :
//
// Output     :
//
// -----------------------------------------------
// synopsys translate_off
// synopsys translate_on
//
// Reading file:  periphs_reg.h
//
// synopsys translate_off
// synopsys translate_on
// -------------------------------------------------------------------
// Peripheral 0   (APB slave 0)
// -------------------------------------------------------------------
// -----------------------------------------------
// CBUS_BASE:  PERIPHS0_CBUS_BASE = 0x00
// -----------------------------------------------
// ----------------------------
// SPI
// ----------------------------
#define SPI_FLASH_CMD                              0x0000
    #define SPI_FLASH_READ    31
    #define SPI_FLASH_WREN    30
    #define SPI_FLASH_WRDI    29
    #define SPI_FLASH_RDID    28
    #define SPI_FLASH_RDSR    27
    #define SPI_FLASH_WRSR    26
    #define SPI_FLASH_PP      25
    #define SPI_FLASH_SE      24
    #define SPI_FLASH_BE      23
    #define SPI_FLASH_CE      22
    #define SPI_FLASH_DP      21
    #define SPI_FLASH_RES     20
    #define SPI_HPM           19
    #define SPI_FLASH_USR     18
    #define SPI_FLASH_USR_ADDR 15
    #define SPI_FLASH_USR_DUMMY 14
    #define SPI_FLASH_USR_DIN   13
    #define SPI_FLASH_USR_DOUT   12
    #define SPI_FLASH_USR_DUMMY_BLEN   10
    #define SPI_FLASH_USR_CMD     0
#define SPI_FLASH_ADDR                             0x0001
    #define SPI_FLASH_BYTES_LEN 24
    #define SPI_FLASH_ADDR_START 0
#define SPI_FLASH_CTRL                             0x0002
    #define SPI_ENABLE_AHB    17
    #define SPI_SST_AAI       16
    #define SPI_RES_RID       15
    #define SPI_FREAD_DUAL    14
    #define SPI_READ_READ_EN  13
    #define SPI_CLK_DIV0      12
    #define SPI_CLKCNT_N      8
    #define SPI_CLKCNT_H      4
    #define SPI_CLKCNT_L      0
#define SPI_FLASH_CTRL1                            0x0003
#define SPI_FLASH_STATUS                           0x0004
#define SPI_FLASH_CTRL2                            0x0005
#define SPI_FLASH_CLOCK                            0x0006
#define SPI_FLASH_USER                             0x0007
#define SPI_FLASH_USER1                            0x0008
#define SPI_FLASH_USER2                            0x0009
#define SPI_FLASH_USER3                            0x000a
#define SPI_FLASH_USER4                            0x000b
#define SPI_FLASH_SLAVE                            0x000c
#define SPI_FLASH_SLAVE1                           0x000d
#define SPI_FLASH_SLAVE2                           0x000e
#define SPI_FLASH_SLAVE3                           0x000f
#define SPI_FLASH_C0                               0x0010
#define SPI_FLASH_C1                               0x0011
#define SPI_FLASH_C2                               0x0012
#define SPI_FLASH_C3                               0x0013
#define SPI_FLASH_C4                               0x0014
#define SPI_FLASH_C5                               0x0015
#define SPI_FLASH_C6                               0x0016
#define SPI_FLASH_C7                               0x0017
#define SPI_FLASH_B8                               0x0018
#define SPI_FLASH_B9                               0x0019
#define SPI_FLASH_B10                              0x001a
#define SPI_FLASH_B11                              0x001b
#define SPI_FLASH_B12                              0x001c
#define SPI_FLASH_B13                              0x001d
#define SPI_FLASH_B14                              0x001e
#define SPI_FLASH_B15                              0x001f
// ----------------------------
// IR Remote
// ----------------------------
#define AO_IR_DEC_LDR_ACTIVE                       0x0020
#define AO_IR_DEC_LDR_IDLE                         0x0021
#define AO_IR_DEC_LDR_REPEAT                       0x0022
#define AO_IR_DEC_BIT_0                            0x0023
#define AO_IR_DEC_REG0                             0x0024
#define AO_IR_DEC_FRAME                            0x0025
#define AO_IR_DEC_STATUS                           0x0026
#define AO_IR_DEC_REG1                             0x0027
// ----------------------------
// Multiformat IR Remote
// ----------------------------
#define AO_MF_IR_DEC_LDR_ACTIVE                    0x0030
#define AO_MF_IR_DEC_LDR_IDLE                      0x0031
#define AO_MF_IR_DEC_LDR_REPEAT                    0x0032
#define AO_MF_IR_DEC_BIT_0                         0x0033
#define AO_MF_IR_DEC_REG0                          0x0034
#define AO_MF_IR_DEC_FRAME                         0x0035
#define AO_MF_IR_DEC_STATUS                        0x0036
#define AO_MF_IR_DEC_REG1                          0x0037
#define AO_MF_IR_DEC_REG2                          0x0038
#define AO_MF_IR_DEC_DURATN2                       0x0039
#define AO_MF_IR_DEC_DURATN3                       0x003a
#define AO_MF_IR_DEC_FRAME1                        0x003b
#define AO_MF_IR_DEC_STATUS1                       0x003c
#define AO_MF_IR_DEC_STATUS2                       0x003d
#define AO_MF_IR_DEC_REG3                          0x003e
#define AO_MF_IR_DEC_FRAME_RSV0                    0x003f
#define AO_MF_IR_DEC_FRAME_RSV1                    0x0040
//
// Reading file:  intc_reg.h
//
// synopsys translate_off
// synopsys translate_on
// CBUS base slave address
// -----------------------------------------------
// CBUS_BASE:  INTC_CBUS_BASE = 0x00
// -----------------------------------------------
// Up to 256 registers for this base
#define INTC_DEBUG_REG0                            0x0080
#define INTC_DEBUG_REG1                            0x0081
#define INTC_DEBUG_REG2                            0x0082
#define INTC_DEBUG_REG3                            0x0083
#define INTC_DEBUG_REG4                            0x0084
#define INTC_DEBUG_REG5                            0x0085
#define GPIO_INTR_EDGE_POL                         0x0088
#define GPIO_INTR_GPIO_SEL0                        0x0089
#define GPIO_INTR_GPIO_SEL1                        0x008a
#define GPIO_INTR_FILTER_SEL0                      0x008b
#define INTR_STAT_0                                0x0090
#define INTR_STAT_CLR_0                            0x0091
#define INTR_MASK_0                                0x0092
#define INTR_FIRQ_SEL_0                            0x0093
#define INTR_PENDING_0                             0x0094
#define INTR_POLARITY_0                            0x0095
#define INTR_EDGE_0                                0x0096
       #define INT_I2S_OUT_PLS_WR_IRQ     0x0
       #define INT_I2S_IN_PLS_RD_IRQ      0x1
       #define INT_IR_DEC                 0x2
       #define INT_TIMERD                 0x3
       #define INT_TIMERC                 0x4
       #define INT_TIMERB                 0x5
       #define INT_TIMERA                 0x6
       #define INT_SPI                    0x7
       #define INT_SAR_ADC                0x8
       #define INT_UART2                  0x9
       #define INT_UART1                  0xA
       #define INT_UART0                  0xB
       #define INT_I2C_1                  0xC
       #define INT_I2C_0                  0xD
       #define INT_WATCHDOG               0xE
       #define INT_VPU_HSYNC              0xF
       #define INT_VPU_VSYNC              0x10
       #define INT_HDMIRX                 0x11
       #define INT_AO_CEC                 0x12
       #define I2S_OUT_FIFO_SMALL0_IRQ    0x13
       #define I2S_OUT_FIFO_BIG1024_IRQ   0x14
       #define I2S_IN_FIFO_SMALL0_IRQ     0x15
       #define I2S_IN_FIFO_BIG1024_IRQ    0x16
       #define INT_VPU_FSM_STATE_CHG_IRQ  0x17
       #define INT_VPU_FSM_STBL_CHG_IRQ   0x18
       #define INT_HDMI_MEAS_IRQ          0x19
       #define INT_HDMIRX_VS_IRQ          0x1a
#define INTR_STAT_1                                0x0098
#define INTR_STAT_CLR_1                            0x0099
#define INTR_MASK_1                                0x009a
#define INTR_FIRQ_SEL_1                            0x009b
#define INTR_PENDING_1                             0x009c
#define INTR_POLARITY_1                            0x009d
#define INTR_EDGE_1                                0x009e
#define INTR_STAT_2                                0x00a0
#define INTR_STAT_CLR_2                            0x00a1
#define INTR_MASK_2                                0x00a2
#define INTR_FIRQ_SEL_2                            0x00a3
#define INTR_PENDING_2                             0x00a4
#define INTR_POLARITY_2                            0x00a5
#define INTR_EDGE_2                                0x00a6
#define INTR_STAT_3                                0x00a8
#define INTR_STAT_CLR_3                            0x00a9
#define INTR_MASK_3                                0x00aa
#define INTR_FIRQ_SEL_3                            0x00ab
#define INTR_PENDING_3                             0x00ac
//`define INTR_POLARITY_3             8'had
//`define INTR_EDGE_3                 8'hae
#define TIMER_MUX                                  0x00b0
#define TIMERA                                     0x00b1
#define TIMERB                                     0x00b2
#define TIMERC                                     0x00b3
#define TIMERD                                     0x00b4
#define TIMERE                                     0x00b5
#define INTC_DEBUG_REG6                            0x00c0
#define INTC_DEBUG_REG7                            0x00c1
#define INTC_DEBUG_REG8                            0x00c2
#define INTC_DEBUG_REG9                            0x00c3
#define INTC_DEBUG_REG10                           0x00c4
#define INTC_DEBUG_REG11                           0x00c5
// synopsys translate_off
// synopsys translate_on
//
// Closing file:  intc_reg.h
//
// -------------------------------------------------------------------
// Peripheral 1   (APB slave 1)
// -------------------------------------------------------------------
// -----------------------------------------------
// CBUS_BASE:  PERIPHS1_CBUS_BASE = 0x01
// -----------------------------------------------
// ----------------------------
// I2C Master 0
// ----------------------------
#define I2C_M_0_CONTROL_REG                        0x0100
    #define     I2C_M_MANUAL_SDA_I        26
    #define     I2C_M_MANUAL_SCL_I        25
    #define     I2C_M_MANUAL_SDA_O        24
    #define     I2C_M_MANUAL_SCL_O        23
    #define     I2C_M_MANUAL_EN           22
    #define     I2C_M_DELAY_MSB           21
    #define     I2C_M_DELAY_LSB           12
    #define     I2C_M_DATA_CNT_MSB        11
    #define     I2C_M_DATA_CNT_LSB        8
    #define     I2C_M_CURR_TOKEN_MSB      7
    #define     I2C_M_CURR_TOKEN_LSB      4
    #define     I2C_M_ERROR               3
    #define     I2C_M_STATUS              2
    #define     I2C_M_ACK_IGNORE          1
    #define     I2C_M_START               0
#define I2C_M_0_SLAVE_ADDR                         0x0101
#define I2C_M_0_TOKEN_LIST0                        0x0102
#define I2C_M_0_TOKEN_LIST1                        0x0103
#define I2C_M_0_WDATA_REG0                         0x0104
#define I2C_M_0_WDATA_REG1                         0x0105
#define I2C_M_0_RDATA_REG0                         0x0106
#define I2C_M_0_RDATA_REG1                         0x0107
// ----------------------------
// I2C Master 1
// ----------------------------
#define I2C_M_1_CONTROL_REG                        0x0108
#define I2C_M_1_SLAVE_ADDR                         0x0109
#define I2C_M_1_TOKEN_LIST0                        0x010a
#define I2C_M_1_TOKEN_LIST1                        0x010b
#define I2C_M_1_WDATA_REG0                         0x010c
#define I2C_M_1_WDATA_REG1                         0x010d
#define I2C_M_1_RDATA_REG0                         0x010e
#define I2C_M_1_RDATA_REG1                         0x010f
// ----------------------------
// UART0
// ----------------------------
#define UART0_WFIFO                                0x0110
#define UART0_RFIFO                                0x0111
#define UART0_CONTROL                              0x0112
#define UART0_STATUS                               0x0113
#define UART0_MISC                                 0x0114
#define UART0_REG5                                 0x0115
// ----------------------------
// UART1
// ----------------------------
#define UART1_WFIFO                                0x0118
#define UART1_RFIFO                                0x0119
#define UART1_CONTROL                              0x011a
#define UART1_STATUS                               0x011b
#define UART1_MISC                                 0x011c
#define UART1_REG5                                 0x011d
// ----------------------------
// UART2
// ----------------------------
#define UART2_WFIFO                                0x0120
#define UART2_RFIFO                                0x0121
#define UART2_CONTROL                              0x0122
#define UART2_STATUS                               0x0123
#define UART2_MISC                                 0x0124
#define UART2_REG5                                 0x0125
// ----------------------------
// SAR ADC
// ----------------------------
#define AO_SAR_ADC_REG0                            0x0130
#define AO_SAR_ADC_CHAN_LIST                       0x0131
#define AO_SAR_ADC_AVG_CNTL                        0x0132
#define AO_SAR_ADC_REG3                            0x0133
#define AO_SAR_ADC_DELAY                           0x0134
#define AO_SAR_ADC_LAST_RD                         0x0135
#define AO_SAR_ADC_FIFO_RD                         0x0136
#define AO_SAR_ADC_AUX_SW                          0x0137
#define AO_SAR_ADC_CHAN_10_SW                      0x0138
#define AO_SAR_ADC_DETECT_IDLE_SW                  0x0139
#define AO_SAR_ADC_DELTA_10                        0x013a
#define AO_SAR_ADC_REG11                           0x013b
// ----------------------------
// PWM / DS A/B
// ----------------------------
#define PWM_PWM_A                                  0x0140
#define PWM_PWM_B                                  0x0141
#define PWM_MISC_REG_AB                            0x0142
#define PWM_DELTA_SIGMA_AB                         0x0143
// ----------------------------
// EE General Registers
// ----------------------------
// Move as needed...Created by Chris Maslyar because I needed a register or two in the EE domain :)
#define CRT_GEN_CLK_CNTL                           0x0148
// ----------------------------
// Pad conntrols
// ----------------------------
#define PAD_PULL_UP_REG2                           0x0150
#define PAD_PULL_UP_REG3                           0x0151
#define PAD_PULL_UP_REG4                           0x0152
#define PAD_PULL_UP_EN_REG2                        0x0158
#define PAD_PULL_UP_EN_REG3                        0x0159
#define PAD_PULL_UP_EN_REG4                        0x015a
// ----------------------------
// GPIO
// ----------------------------
#define PREG_PAD_GPIO2_EN_N                        0x0160
#define PREG_PAD_GPIO2_O                           0x0161
#define PREG_PAD_GPIO2_I                           0x0162
// ----------------------------
#define PREG_PAD_GPIO3_EN_N                        0x0163
#define PREG_PAD_GPIO3_O                           0x0164
#define PREG_PAD_GPIO3_I                           0x0165
// ----------------------------
#define PREG_PAD_GPIO4_EN_N                        0x0166
#define PREG_PAD_GPIO4_O                           0x0167
#define PREG_PAD_GPIO4_I                           0x0168
// ----------------------------
// Pin Mux
// ----------------------------
#define PERIPHS_PIN_MUX_2                          0x016a
#define PERIPHS_PIN_MUX_3                          0x016b
#define PERIPHS_PIN_MUX_4                          0x016c
#define PERIPHS_PIN_MUX_5                          0x016d
//system pll control
#define SYS_PLL_CTL                                0x0170
#define SYS_PLL_CTL1                               0x0171
#define SYS_PLL_CTL2                               0x0172
#define SYS_PLL_CTL3                               0x0173
#define SYS_PLL_CTL4                               0x0174
#define SYS_DPLL_TOP                               0x0175
//control reg for i2c ahb master
#define PERIPHS_I2C_MASTER_CTL                     0x0178
// ---------------------------
// Generic production test
// ----------------------------
#define PROD_TEST_REG0                             0x0179
#define PROD_TEST_REG1                             0x017a
//video clock control
#define VID_PLL_CLK_CNTL                           0x017c
#define VID_CLK_CNTL                               0x017d
#define HDMIRX_CFG_CLK_CNTL                        0x017f
#define HDMIRX_AUD_CLK_CNTL                        0x0180
//vx1_lvds phy
#define VX1_LVDS_PHY_CNTL0                         0x0181
#define VX1_LVDS_PHY_CNTL1                         0x0182
#define VX1_LVDS_PHY_CNTL2                         0x0183
#define VX1_LVDS_PHY_STATUS                        0x0184
//debug bus select
#define DEBUG_BUS_SEL_CTL                          0x0185
//reference clock control
#define REFERENCE_CLK_CNTL                         0x0186
// HDMI RX MEAS
#define HDMIRX_MEAS_CLK_CNTL                       0x0187
//VX1_LVDS_PHY
#define VX1_LVDS_COMBO_CTL0                        0x018a
#define VX1_LVDS_COMBO_CTL1                        0x018b
#define VX1_LVDS_COMBO_CTL2                        0x018c
#define VX1_LVDS_COMBO_CTL3                        0x018d

//---------------------------------------------------
//   clock measurement
//---------------------------------------------------
#define MSR_CLK_REG0                               0x0190
#define MSR_CLK_REG1                               0x0191
#define MSR_CLK_REG2                               0x0192
#define MSR_CLK_REG3                               0x0193
#define MSR_CLK_REG4                               0x0194
#define MSR_CLK_REG5                               0x0195
#define MSR_CLK_DUTY                               0x0196
//vx1_lvds pll control
#define VX1_LVDS_PLL_CTL                           0x019a
#define VX1_LVDS_PLL_CTL1                          0x019b
#define VX1_LVDS_PLL_CTL2                          0x019c
#define VX1_LVDS_PLL_CTL3                          0x019d
#define VX1_LVDS_PLL_CTL4                          0x019e
#define VX1_LVDS_PLL_CTL5                          0x0198
#define VX1_LVDS_PLL_CTL6                          0x0199
//METAL_REVISION
#define METAL_REVISION                             0x01a0
//global clock gate enable in EE domain
#define PERIPHS_CLK_GATE_EN_EE                     0x01a1
// -------------------------------------------------------------------
// Peripheral 2   (APB slave 2)
// -------------------------------------------------------------------
// -----------------------------------------------
// CBUS_BASE:  PERIPHS2_CBUS_BASE = 0x02
// -----------------------------------------------
// ---------------------------
// test_n regs
// ----------------------------
#define PREG_JTAG_GPIO_ADDR                        0x0200
// ---------------------------
// Sticky regs
// ----------------------------
#define PREG_STICKY_REG0                           0x0201
#define PREG_STICKY_REG1                           0x0202
#define PREG_WRITE_ONCE_REG                        0x0203
// ---------------------------
// reset regs
// ----------------------------
#define RESET0_REGISTER                            0x0204
#define RESET1_REGISTER                            0x0205
#define RESET0_LEVEL                               0x0208
#define RESET1_LEVEL                               0x0209
#define RESET_EE_LEVEL                             0x020a
// ----------------------------
// Pad conntrols
// ----------------------------
#define PAD_PULL_UP_REG0                           0x0210
#define PAD_PULL_UP_REG1                           0x0211
#define PAD_PULL_UP_EN_REG0                        0x0218
#define PAD_PULL_UP_EN_REG1                        0x0219
// ----------------------------
// GPIO
// ----------------------------
#define PREG_PAD_GPIO0_EN_N                        0x0220
#define PREG_PAD_GPIO0_O                           0x0221
#define PREG_PAD_GPIO0_I                           0x0222
// ----------------------------
#define PREG_PAD_GPIO1_EN_N                        0x0223
#define PREG_PAD_GPIO1_O                           0x0224
#define PREG_PAD_GPIO1_I                           0x0225
// ----------------------------
// ----------------------------
// Pin Mux
// ----------------------------
#define PERIPHS_PIN_MUX_0                          0x0228
#define PERIPHS_PIN_MUX_1                          0x0229
//other registers in periph_regs.v
#define PREG_CTLREG0_ADDR                          0x0230
#define ADC_TOP_MISC                               0x0231
//control reg for ahb arbiter
#define PERIPHS_AHB_ARB_CTL                        0x0238
//control reg for watchdog
#define PERIPHS_WATCHDOG_CTL                       0x0239
#define PERIPHS_WATCHDOG_CNT                       0x023a
//control reg for memory bist
#define PERIPHS_MEMORY_BIST_CTL                    0x023b
//power down control for SRAM
#define PERIPHS_SRAM_PD                            0x023c
//global clock gate enable in AO domain
#define PERIPHS_CLK_GATE_EN_AO                     0x023d
//power down and isolation control
#define EE_PWR_ISO_CTL                             0x023e
//system clock control
#define SYS_CLK_CNTL                               0x023f
//sar adc clock control
#define SAR_ADC_CLK_CNTL                           0x0240
//internal osc calibration control
#define INTER_OSC_CAL_CTL                          0x0241
#define INTER_OSC_CAL_STATUS                       0x0242
//internal osc control
#define INTER_OSC_CTL0                             0x0243
#define INTER_OSC_CTL1                             0x0244
//AO domain system control
#define AO_SYS_CONTROL_REG0                        0x0245
//32KHz clock control
#define CEC_CLK_32K_CNTL                           0x0246
//crystal clock divider control
#define CRYSTAL_CLK_DIV_CNTL                       0x0247
//watchdog & timebase osc clock control
#define WATCHDOG_TIMEBASE_OSC_CLK_CNTL             0x0248
//BIASGEN control
#define BIASGEN_CNTL                               0x0249
//---------------------------------------------------
//   CEC in AO
//---------------------------------------------------
#define AO_CEC_GEN_CNTL                            0x0250
#define AO_CEC_RW_REG                              0x0251
#define AO_CEC_INTR_MASKN                          0x0252
#define AO_CEC_INTR_CLR                            0x0253
#define AO_CEC_INTR_STAT                           0x0254
// synopsys translate_off
// synopsys translate_on
//
// Closing file:  periphs_reg.h
//
//========================================================================
// I2S registers   (APB slave 7)
//========================================================================
// -----------------------------------------------
// CBUS_BASE:  I2S_CTRL_CBUS_BASE = 0x08
// -----------------------------------------------
#define I2S_IN_CTRL                                0x0800
    #define I2S_IN_FAST_ENABLE 31
    #define I2S_IN_SLOW_ENABLE 30
    #define I2S_IN_16BIT 29
    #define I2S_IN_DEBUG 28
    #define I2S_IN_REV_WS 27
    #define I2S_IN_REV_DAT 26
    #define I2S_IN_BIT_SKEW 23 //[25:23]
    #define I2S_IN_LR_TOREG 22
    #define I2S_SCK_TOINPATH_SEL 21
    #define I2S_SCK_TOOUTPATH_SEL 20
    #define I2S_SCK_TOGPIO_SEL 19
    #define DETECT_CH_STATUS 18
    #define I2S_IN_IRQ_EN_NUM 10 //[7:0]
    #define I2S_IN_IRQ_NUM 0 //[9:0]
#define I2S_OUT_CTRL                               0x0801
    #define I2S_OUT_FAST_ENABLE 31
    #define I2S_OUT_SLOW_ENABLE 30
    #define I2S_OUT_16BIT 29
    #define I2S_OUT_DEBUG 28
    #define I2S_OUT_REV_WS 27
    #define I2S_OUT_REV_DAT 26
    #define I2S_OUT_BIT_SKEW 23 //[25:23]
    #define I2S_OUT_LR_TOREG 22
    #define RESERVED 18 //[21:18]
    #define I2S_OUT_IRQ_EN_NUM 10 //[7:0]
    #define I2S_OUT_IRQ_NUM 0 //[9:0]
#define I2S_STATE                                  0x0802
#define CH_STATUS1_0                               0x0803
#define CH_STATUS1_1                               0x0804
#define CH_STATUS1_2                               0x0805
#define CH_STATUS1_3                               0x0806
#define CH_STATUS1_4                               0x0807
#define CH_STATUS1_5                               0x0808
#define CH_STATUS2_0                               0x0809
#define CH_STATUS2_1                               0x080a
#define CH_STATUS2_2                               0x080b
#define CH_STATUS2_3                               0x080c
#define CH_STATUS2_4                               0x080d
#define CH_STATUS2_5                               0x080e
#define CH_STATUS_LOCK                             0x080f
#define HDMI_MEAS_CTRL                             0x0810
#define HDMI_MEAS_M1                               0x0811
#define HDMI_MEAS_STAT1                            0x0812
#define HDMI_MEAS_STAT2                            0x0813
// -----------------------------------------------
// CBUS_BASE:  I2S_READ_CBUS_BASE = 0x09
// -----------------------------------------------
#define I2S_READ_ADR_00                            0x0900
#define I2S_READ_ADR_01                            0x0901
#define I2S_READ_ADR_02                            0x0902
#define I2S_READ_ADR_03                            0x0903
#define I2S_READ_ADR_04                            0x0904
#define I2S_READ_ADR_05                            0x0905
#define I2S_READ_ADR_06                            0x0906
#define I2S_READ_ADR_07                            0x0907
#define I2S_READ_ADR_08                            0x0908
#define I2S_READ_ADR_09                            0x0909
#define I2S_READ_ADR_0A                            0x090a
#define I2S_READ_ADR_0B                            0x090b
#define I2S_READ_ADR_0C                            0x090c
#define I2S_READ_ADR_0D                            0x090d
#define I2S_READ_ADR_0E                            0x090e
#define I2S_READ_ADR_0F                            0x090f
#define I2S_READ_ADR_10                            0x0910
#define I2S_READ_ADR_11                            0x0911
#define I2S_READ_ADR_12                            0x0912
#define I2S_READ_ADR_13                            0x0913
#define I2S_READ_ADR_14                            0x0914
#define I2S_READ_ADR_15                            0x0915
#define I2S_READ_ADR_16                            0x0916
#define I2S_READ_ADR_17                            0x0917
#define I2S_READ_ADR_18                            0x0918
#define I2S_READ_ADR_19                            0x0919
#define I2S_READ_ADR_1A                            0x091a
#define I2S_READ_ADR_1B                            0x091b
#define I2S_READ_ADR_1C                            0x091c
#define I2S_READ_ADR_1D                            0x091d
#define I2S_READ_ADR_1E                            0x091e
#define I2S_READ_ADR_1F                            0x091f
#define I2S_READ_ADR_20                            0x0920
#define I2S_READ_ADR_21                            0x0921
#define I2S_READ_ADR_22                            0x0922
#define I2S_READ_ADR_23                            0x0923
#define I2S_READ_ADR_24                            0x0924
#define I2S_READ_ADR_25                            0x0925
#define I2S_READ_ADR_26                            0x0926
#define I2S_READ_ADR_27                            0x0927
#define I2S_READ_ADR_28                            0x0928
#define I2S_READ_ADR_29                            0x0929
#define I2S_READ_ADR_2A                            0x092a
#define I2S_READ_ADR_2B                            0x092b
#define I2S_READ_ADR_2C                            0x092c
#define I2S_READ_ADR_2D                            0x092d
#define I2S_READ_ADR_2E                            0x092e
#define I2S_READ_ADR_2F                            0x092f
#define I2S_READ_ADR_30                            0x0930
#define I2S_READ_ADR_31                            0x0931
#define I2S_READ_ADR_32                            0x0932
#define I2S_READ_ADR_33                            0x0933
#define I2S_READ_ADR_34                            0x0934
#define I2S_READ_ADR_35                            0x0935
#define I2S_READ_ADR_36                            0x0936
#define I2S_READ_ADR_37                            0x0937
#define I2S_READ_ADR_38                            0x0938
#define I2S_READ_ADR_39                            0x0939
#define I2S_READ_ADR_3A                            0x093a
#define I2S_READ_ADR_3B                            0x093b
#define I2S_READ_ADR_3C                            0x093c
#define I2S_READ_ADR_3D                            0x093d
#define I2S_READ_ADR_3E                            0x093e
#define I2S_READ_ADR_3F                            0x093f
#define I2S_READ_ADR_40                            0x0940
#define I2S_READ_ADR_41                            0x0941
#define I2S_READ_ADR_42                            0x0942
#define I2S_READ_ADR_43                            0x0943
#define I2S_READ_ADR_44                            0x0944
#define I2S_READ_ADR_45                            0x0945
#define I2S_READ_ADR_46                            0x0946
#define I2S_READ_ADR_47                            0x0947
#define I2S_READ_ADR_48                            0x0948
#define I2S_READ_ADR_49                            0x0949
#define I2S_READ_ADR_4A                            0x094a
#define I2S_READ_ADR_4B                            0x094b
#define I2S_READ_ADR_4C                            0x094c
#define I2S_READ_ADR_4D                            0x094d
#define I2S_READ_ADR_4E                            0x094e
#define I2S_READ_ADR_4F                            0x094f
#define I2S_READ_ADR_50                            0x0950
#define I2S_READ_ADR_51                            0x0951
#define I2S_READ_ADR_52                            0x0952
#define I2S_READ_ADR_53                            0x0953
#define I2S_READ_ADR_54                            0x0954
#define I2S_READ_ADR_55                            0x0955
#define I2S_READ_ADR_56                            0x0956
#define I2S_READ_ADR_57                            0x0957
#define I2S_READ_ADR_58                            0x0958
#define I2S_READ_ADR_59                            0x0959
#define I2S_READ_ADR_5A                            0x095a
#define I2S_READ_ADR_5B                            0x095b
#define I2S_READ_ADR_5C                            0x095c
#define I2S_READ_ADR_5D                            0x095d
#define I2S_READ_ADR_5E                            0x095e
#define I2S_READ_ADR_5F                            0x095f
#define I2S_READ_ADR_60                            0x0960
#define I2S_READ_ADR_61                            0x0961
#define I2S_READ_ADR_62                            0x0962
#define I2S_READ_ADR_63                            0x0963
#define I2S_READ_ADR_64                            0x0964
#define I2S_READ_ADR_65                            0x0965
#define I2S_READ_ADR_66                            0x0966
#define I2S_READ_ADR_67                            0x0967
#define I2S_READ_ADR_68                            0x0968
#define I2S_READ_ADR_69                            0x0969
#define I2S_READ_ADR_6A                            0x096a
#define I2S_READ_ADR_6B                            0x096b
#define I2S_READ_ADR_6C                            0x096c
#define I2S_READ_ADR_6D                            0x096d
#define I2S_READ_ADR_6E                            0x096e
#define I2S_READ_ADR_6F                            0x096f
#define I2S_READ_ADR_70                            0x0970
#define I2S_READ_ADR_71                            0x0971
#define I2S_READ_ADR_72                            0x0972
#define I2S_READ_ADR_73                            0x0973
#define I2S_READ_ADR_74                            0x0974
#define I2S_READ_ADR_75                            0x0975
#define I2S_READ_ADR_76                            0x0976
#define I2S_READ_ADR_77                            0x0977
#define I2S_READ_ADR_78                            0x0978
#define I2S_READ_ADR_79                            0x0979
#define I2S_READ_ADR_7A                            0x097a
#define I2S_READ_ADR_7B                            0x097b
#define I2S_READ_ADR_7C                            0x097c
#define I2S_READ_ADR_7D                            0x097d
#define I2S_READ_ADR_7E                            0x097e
#define I2S_READ_ADR_7F                            0x097f
#define I2S_READ_ADR_80                            0x0980
#define I2S_READ_ADR_81                            0x0981
#define I2S_READ_ADR_82                            0x0982
#define I2S_READ_ADR_83                            0x0983
#define I2S_READ_ADR_84                            0x0984
#define I2S_READ_ADR_85                            0x0985
#define I2S_READ_ADR_86                            0x0986
#define I2S_READ_ADR_87                            0x0987
#define I2S_READ_ADR_88                            0x0988
#define I2S_READ_ADR_89                            0x0989
#define I2S_READ_ADR_8A                            0x098a
#define I2S_READ_ADR_8B                            0x098b
#define I2S_READ_ADR_8C                            0x098c
#define I2S_READ_ADR_8D                            0x098d
#define I2S_READ_ADR_8E                            0x098e
#define I2S_READ_ADR_8F                            0x098f
#define I2S_READ_ADR_90                            0x0990
#define I2S_READ_ADR_91                            0x0991
#define I2S_READ_ADR_92                            0x0992
#define I2S_READ_ADR_93                            0x0993
#define I2S_READ_ADR_94                            0x0994
#define I2S_READ_ADR_95                            0x0995
#define I2S_READ_ADR_96                            0x0996
#define I2S_READ_ADR_97                            0x0997
#define I2S_READ_ADR_98                            0x0998
#define I2S_READ_ADR_99                            0x0999
#define I2S_READ_ADR_9A                            0x099a
#define I2S_READ_ADR_9B                            0x099b
#define I2S_READ_ADR_9C                            0x099c
#define I2S_READ_ADR_9D                            0x099d
#define I2S_READ_ADR_9E                            0x099e
#define I2S_READ_ADR_9F                            0x099f
#define I2S_READ_ADR_A0                            0x09a0
#define I2S_READ_ADR_A1                            0x09a1
#define I2S_READ_ADR_A2                            0x09a2
#define I2S_READ_ADR_A3                            0x09a3
#define I2S_READ_ADR_A4                            0x09a4
#define I2S_READ_ADR_A5                            0x09a5
#define I2S_READ_ADR_A6                            0x09a6
#define I2S_READ_ADR_A7                            0x09a7
#define I2S_READ_ADR_A8                            0x09a8
#define I2S_READ_ADR_A9                            0x09a9
#define I2S_READ_ADR_AA                            0x09aa
#define I2S_READ_ADR_AB                            0x09ab
#define I2S_READ_ADR_AC                            0x09ac
#define I2S_READ_ADR_AD                            0x09ad
#define I2S_READ_ADR_AE                            0x09ae
#define I2S_READ_ADR_AF                            0x09af
#define I2S_READ_ADR_B0                            0x09b0
#define I2S_READ_ADR_B1                            0x09b1
#define I2S_READ_ADR_B2                            0x09b2
#define I2S_READ_ADR_B3                            0x09b3
#define I2S_READ_ADR_B4                            0x09b4
#define I2S_READ_ADR_B5                            0x09b5
#define I2S_READ_ADR_B6                            0x09b6
#define I2S_READ_ADR_B7                            0x09b7
#define I2S_READ_ADR_B8                            0x09b8
#define I2S_READ_ADR_B9                            0x09b9
#define I2S_READ_ADR_BA                            0x09ba
#define I2S_READ_ADR_BB                            0x09bb
#define I2S_READ_ADR_BC                            0x09bc
#define I2S_READ_ADR_BD                            0x09bd
#define I2S_READ_ADR_BE                            0x09be
#define I2S_READ_ADR_BF                            0x09bf
#define I2S_READ_ADR_C0                            0x09c0
#define I2S_READ_ADR_C1                            0x09c1
#define I2S_READ_ADR_C2                            0x09c2
#define I2S_READ_ADR_C3                            0x09c3
#define I2S_READ_ADR_C4                            0x09c4
#define I2S_READ_ADR_C5                            0x09c5
#define I2S_READ_ADR_C6                            0x09c6
#define I2S_READ_ADR_C7                            0x09c7
#define I2S_READ_ADR_C8                            0x09c8
#define I2S_READ_ADR_C9                            0x09c9
#define I2S_READ_ADR_CA                            0x09ca
#define I2S_READ_ADR_CB                            0x09cb
#define I2S_READ_ADR_CC                            0x09cc
#define I2S_READ_ADR_CD                            0x09cd
#define I2S_READ_ADR_CE                            0x09ce
#define I2S_READ_ADR_CF                            0x09cf
#define I2S_READ_ADR_D0                            0x09d0
#define I2S_READ_ADR_D1                            0x09d1
#define I2S_READ_ADR_D2                            0x09d2
#define I2S_READ_ADR_D3                            0x09d3
#define I2S_READ_ADR_D4                            0x09d4
#define I2S_READ_ADR_D5                            0x09d5
#define I2S_READ_ADR_D6                            0x09d6
#define I2S_READ_ADR_D7                            0x09d7
#define I2S_READ_ADR_D8                            0x09d8
#define I2S_READ_ADR_D9                            0x09d9
#define I2S_READ_ADR_DA                            0x09da
#define I2S_READ_ADR_DB                            0x09db
#define I2S_READ_ADR_DC                            0x09dc
#define I2S_READ_ADR_DD                            0x09dd
#define I2S_READ_ADR_DE                            0x09de
#define I2S_READ_ADR_DF                            0x09df
#define I2S_READ_ADR_E0                            0x09e0
#define I2S_READ_ADR_E1                            0x09e1
#define I2S_READ_ADR_E2                            0x09e2
#define I2S_READ_ADR_E3                            0x09e3
#define I2S_READ_ADR_E4                            0x09e4
#define I2S_READ_ADR_E5                            0x09e5
#define I2S_READ_ADR_E6                            0x09e6
#define I2S_READ_ADR_E7                            0x09e7
#define I2S_READ_ADR_E8                            0x09e8
#define I2S_READ_ADR_E9                            0x09e9
#define I2S_READ_ADR_EA                            0x09ea
#define I2S_READ_ADR_EB                            0x09eb
#define I2S_READ_ADR_EC                            0x09ec
#define I2S_READ_ADR_ED                            0x09ed
#define I2S_READ_ADR_EE                            0x09ee
#define I2S_READ_ADR_EF                            0x09ef
#define I2S_READ_ADR_F0                            0x09f0
#define I2S_READ_ADR_F1                            0x09f1
#define I2S_READ_ADR_F2                            0x09f2
#define I2S_READ_ADR_F3                            0x09f3
#define I2S_READ_ADR_F4                            0x09f4
#define I2S_READ_ADR_F5                            0x09f5
#define I2S_READ_ADR_F6                            0x09f6
#define I2S_READ_ADR_F7                            0x09f7
#define I2S_READ_ADR_F8                            0x09f8
#define I2S_READ_ADR_F9                            0x09f9
#define I2S_READ_ADR_FA                            0x09fa
#define I2S_READ_ADR_FB                            0x09fb
#define I2S_READ_ADR_FC                            0x09fc
#define I2S_READ_ADR_FD                            0x09fd
#define I2S_READ_ADR_FE                            0x09fe
#define I2S_READ_ADR_FF                            0x09ff
// -----------------------------------------------
// CBUS_BASE:  I2S_WRITE_CBUS_BASE = 0x0a
// -----------------------------------------------
#define I2S_WRITE_ADR_00                           0x0a00
#define I2S_WRITE_ADR_01                           0x0a01
#define I2S_WRITE_ADR_02                           0x0a02
#define I2S_WRITE_ADR_03                           0x0a03
#define I2S_WRITE_ADR_04                           0x0a04
#define I2S_WRITE_ADR_05                           0x0a05
#define I2S_WRITE_ADR_06                           0x0a06
#define I2S_WRITE_ADR_07                           0x0a07
#define I2S_WRITE_ADR_08                           0x0a08
#define I2S_WRITE_ADR_09                           0x0a09
#define I2S_WRITE_ADR_0A                           0x0a0a
#define I2S_WRITE_ADR_0B                           0x0a0b
#define I2S_WRITE_ADR_0C                           0x0a0c
#define I2S_WRITE_ADR_0D                           0x0a0d
#define I2S_WRITE_ADR_0E                           0x0a0e
#define I2S_WRITE_ADR_0F                           0x0a0f
#define I2S_WRITE_ADR_10                           0x0a10
#define I2S_WRITE_ADR_11                           0x0a11
#define I2S_WRITE_ADR_12                           0x0a12
#define I2S_WRITE_ADR_13                           0x0a13
#define I2S_WRITE_ADR_14                           0x0a14
#define I2S_WRITE_ADR_15                           0x0a15
#define I2S_WRITE_ADR_16                           0x0a16
#define I2S_WRITE_ADR_17                           0x0a17
#define I2S_WRITE_ADR_18                           0x0a18
#define I2S_WRITE_ADR_19                           0x0a19
#define I2S_WRITE_ADR_1A                           0x0a1a
#define I2S_WRITE_ADR_1B                           0x0a1b
#define I2S_WRITE_ADR_1C                           0x0a1c
#define I2S_WRITE_ADR_1D                           0x0a1d
#define I2S_WRITE_ADR_1E                           0x0a1e
#define I2S_WRITE_ADR_1F                           0x0a1f
#define I2S_WRITE_ADR_20                           0x0a20
#define I2S_WRITE_ADR_21                           0x0a21
#define I2S_WRITE_ADR_22                           0x0a22
#define I2S_WRITE_ADR_23                           0x0a23
#define I2S_WRITE_ADR_24                           0x0a24
#define I2S_WRITE_ADR_25                           0x0a25
#define I2S_WRITE_ADR_26                           0x0a26
#define I2S_WRITE_ADR_27                           0x0a27
#define I2S_WRITE_ADR_28                           0x0a28
#define I2S_WRITE_ADR_29                           0x0a29
#define I2S_WRITE_ADR_2A                           0x0a2a
#define I2S_WRITE_ADR_2B                           0x0a2b
#define I2S_WRITE_ADR_2C                           0x0a2c
#define I2S_WRITE_ADR_2D                           0x0a2d
#define I2S_WRITE_ADR_2E                           0x0a2e
#define I2S_WRITE_ADR_2F                           0x0a2f
#define I2S_WRITE_ADR_30                           0x0a30
#define I2S_WRITE_ADR_31                           0x0a31
#define I2S_WRITE_ADR_32                           0x0a32
#define I2S_WRITE_ADR_33                           0x0a33
#define I2S_WRITE_ADR_34                           0x0a34
#define I2S_WRITE_ADR_35                           0x0a35
#define I2S_WRITE_ADR_36                           0x0a36
#define I2S_WRITE_ADR_37                           0x0a37
#define I2S_WRITE_ADR_38                           0x0a38
#define I2S_WRITE_ADR_39                           0x0a39
#define I2S_WRITE_ADR_3A                           0x0a3a
#define I2S_WRITE_ADR_3B                           0x0a3b
#define I2S_WRITE_ADR_3C                           0x0a3c
#define I2S_WRITE_ADR_3D                           0x0a3d
#define I2S_WRITE_ADR_3E                           0x0a3e
#define I2S_WRITE_ADR_3F                           0x0a3f
#define I2S_WRITE_ADR_40                           0x0a40
#define I2S_WRITE_ADR_41                           0x0a41
#define I2S_WRITE_ADR_42                           0x0a42
#define I2S_WRITE_ADR_43                           0x0a43
#define I2S_WRITE_ADR_44                           0x0a44
#define I2S_WRITE_ADR_45                           0x0a45
#define I2S_WRITE_ADR_46                           0x0a46
#define I2S_WRITE_ADR_47                           0x0a47
#define I2S_WRITE_ADR_48                           0x0a48
#define I2S_WRITE_ADR_49                           0x0a49
#define I2S_WRITE_ADR_4A                           0x0a4a
#define I2S_WRITE_ADR_4B                           0x0a4b
#define I2S_WRITE_ADR_4C                           0x0a4c
#define I2S_WRITE_ADR_4D                           0x0a4d
#define I2S_WRITE_ADR_4E                           0x0a4e
#define I2S_WRITE_ADR_4F                           0x0a4f
#define I2S_WRITE_ADR_50                           0x0a50
#define I2S_WRITE_ADR_51                           0x0a51
#define I2S_WRITE_ADR_52                           0x0a52
#define I2S_WRITE_ADR_53                           0x0a53
#define I2S_WRITE_ADR_54                           0x0a54
#define I2S_WRITE_ADR_55                           0x0a55
#define I2S_WRITE_ADR_56                           0x0a56
#define I2S_WRITE_ADR_57                           0x0a57
#define I2S_WRITE_ADR_58                           0x0a58
#define I2S_WRITE_ADR_59                           0x0a59
#define I2S_WRITE_ADR_5A                           0x0a5a
#define I2S_WRITE_ADR_5B                           0x0a5b
#define I2S_WRITE_ADR_5C                           0x0a5c
#define I2S_WRITE_ADR_5D                           0x0a5d
#define I2S_WRITE_ADR_5E                           0x0a5e
#define I2S_WRITE_ADR_5F                           0x0a5f
#define I2S_WRITE_ADR_60                           0x0a60
#define I2S_WRITE_ADR_61                           0x0a61
#define I2S_WRITE_ADR_62                           0x0a62
#define I2S_WRITE_ADR_63                           0x0a63
#define I2S_WRITE_ADR_64                           0x0a64
#define I2S_WRITE_ADR_65                           0x0a65
#define I2S_WRITE_ADR_66                           0x0a66
#define I2S_WRITE_ADR_67                           0x0a67
#define I2S_WRITE_ADR_68                           0x0a68
#define I2S_WRITE_ADR_69                           0x0a69
#define I2S_WRITE_ADR_6A                           0x0a6a
#define I2S_WRITE_ADR_6B                           0x0a6b
#define I2S_WRITE_ADR_6C                           0x0a6c
#define I2S_WRITE_ADR_6D                           0x0a6d
#define I2S_WRITE_ADR_6E                           0x0a6e
#define I2S_WRITE_ADR_6F                           0x0a6f
#define I2S_WRITE_ADR_70                           0x0a70
#define I2S_WRITE_ADR_71                           0x0a71
#define I2S_WRITE_ADR_72                           0x0a72
#define I2S_WRITE_ADR_73                           0x0a73
#define I2S_WRITE_ADR_74                           0x0a74
#define I2S_WRITE_ADR_75                           0x0a75
#define I2S_WRITE_ADR_76                           0x0a76
#define I2S_WRITE_ADR_77                           0x0a77
#define I2S_WRITE_ADR_78                           0x0a78
#define I2S_WRITE_ADR_79                           0x0a79
#define I2S_WRITE_ADR_7A                           0x0a7a
#define I2S_WRITE_ADR_7B                           0x0a7b
#define I2S_WRITE_ADR_7C                           0x0a7c
#define I2S_WRITE_ADR_7D                           0x0a7d
#define I2S_WRITE_ADR_7E                           0x0a7e
#define I2S_WRITE_ADR_7F                           0x0a7f
#define I2S_WRITE_ADR_80                           0x0a80
#define I2S_WRITE_ADR_81                           0x0a81
#define I2S_WRITE_ADR_82                           0x0a82
#define I2S_WRITE_ADR_83                           0x0a83
#define I2S_WRITE_ADR_84                           0x0a84
#define I2S_WRITE_ADR_85                           0x0a85
#define I2S_WRITE_ADR_86                           0x0a86
#define I2S_WRITE_ADR_87                           0x0a87
#define I2S_WRITE_ADR_88                           0x0a88
#define I2S_WRITE_ADR_89                           0x0a89
#define I2S_WRITE_ADR_8A                           0x0a8a
#define I2S_WRITE_ADR_8B                           0x0a8b
#define I2S_WRITE_ADR_8C                           0x0a8c
#define I2S_WRITE_ADR_8D                           0x0a8d
#define I2S_WRITE_ADR_8E                           0x0a8e
#define I2S_WRITE_ADR_8F                           0x0a8f
#define I2S_WRITE_ADR_90                           0x0a90
#define I2S_WRITE_ADR_91                           0x0a91
#define I2S_WRITE_ADR_92                           0x0a92
#define I2S_WRITE_ADR_93                           0x0a93
#define I2S_WRITE_ADR_94                           0x0a94
#define I2S_WRITE_ADR_95                           0x0a95
#define I2S_WRITE_ADR_96                           0x0a96
#define I2S_WRITE_ADR_97                           0x0a97
#define I2S_WRITE_ADR_98                           0x0a98
#define I2S_WRITE_ADR_99                           0x0a99
#define I2S_WRITE_ADR_9A                           0x0a9a
#define I2S_WRITE_ADR_9B                           0x0a9b
#define I2S_WRITE_ADR_9C                           0x0a9c
#define I2S_WRITE_ADR_9D                           0x0a9d
#define I2S_WRITE_ADR_9E                           0x0a9e
#define I2S_WRITE_ADR_9F                           0x0a9f
#define I2S_WRITE_ADR_A0                           0x0aa0
#define I2S_WRITE_ADR_A1                           0x0aa1
#define I2S_WRITE_ADR_A2                           0x0aa2
#define I2S_WRITE_ADR_A3                           0x0aa3
#define I2S_WRITE_ADR_A4                           0x0aa4
#define I2S_WRITE_ADR_A5                           0x0aa5
#define I2S_WRITE_ADR_A6                           0x0aa6
#define I2S_WRITE_ADR_A7                           0x0aa7
#define I2S_WRITE_ADR_A8                           0x0aa8
#define I2S_WRITE_ADR_A9                           0x0aa9
#define I2S_WRITE_ADR_AA                           0x0aaa
#define I2S_WRITE_ADR_AB                           0x0aab
#define I2S_WRITE_ADR_AC                           0x0aac
#define I2S_WRITE_ADR_AD                           0x0aad
#define I2S_WRITE_ADR_AE                           0x0aae
#define I2S_WRITE_ADR_AF                           0x0aaf
#define I2S_WRITE_ADR_B0                           0x0ab0
#define I2S_WRITE_ADR_B1                           0x0ab1
#define I2S_WRITE_ADR_B2                           0x0ab2
#define I2S_WRITE_ADR_B3                           0x0ab3
#define I2S_WRITE_ADR_B4                           0x0ab4
#define I2S_WRITE_ADR_B5                           0x0ab5
#define I2S_WRITE_ADR_B6                           0x0ab6
#define I2S_WRITE_ADR_B7                           0x0ab7
#define I2S_WRITE_ADR_B8                           0x0ab8
#define I2S_WRITE_ADR_B9                           0x0ab9
#define I2S_WRITE_ADR_BA                           0x0aba
#define I2S_WRITE_ADR_BB                           0x0abb
#define I2S_WRITE_ADR_BC                           0x0abc
#define I2S_WRITE_ADR_BD                           0x0abd
#define I2S_WRITE_ADR_BE                           0x0abe
#define I2S_WRITE_ADR_BF                           0x0abf
#define I2S_WRITE_ADR_C0                           0x0ac0
#define I2S_WRITE_ADR_C1                           0x0ac1
#define I2S_WRITE_ADR_C2                           0x0ac2
#define I2S_WRITE_ADR_C3                           0x0ac3
#define I2S_WRITE_ADR_C4                           0x0ac4
#define I2S_WRITE_ADR_C5                           0x0ac5
#define I2S_WRITE_ADR_C6                           0x0ac6
#define I2S_WRITE_ADR_C7                           0x0ac7
#define I2S_WRITE_ADR_C8                           0x0ac8
#define I2S_WRITE_ADR_C9                           0x0ac9
#define I2S_WRITE_ADR_CA                           0x0aca
#define I2S_WRITE_ADR_CB                           0x0acb
#define I2S_WRITE_ADR_CC                           0x0acc
#define I2S_WRITE_ADR_CD                           0x0acd
#define I2S_WRITE_ADR_CE                           0x0ace
#define I2S_WRITE_ADR_CF                           0x0acf
#define I2S_WRITE_ADR_D0                           0x0ad0
#define I2S_WRITE_ADR_D1                           0x0ad1
#define I2S_WRITE_ADR_D2                           0x0ad2
#define I2S_WRITE_ADR_D3                           0x0ad3
#define I2S_WRITE_ADR_D4                           0x0ad4
#define I2S_WRITE_ADR_D5                           0x0ad5
#define I2S_WRITE_ADR_D6                           0x0ad6
#define I2S_WRITE_ADR_D7                           0x0ad7
#define I2S_WRITE_ADR_D8                           0x0ad8
#define I2S_WRITE_ADR_D9                           0x0ad9
#define I2S_WRITE_ADR_DA                           0x0ada
#define I2S_WRITE_ADR_DB                           0x0adb
#define I2S_WRITE_ADR_DC                           0x0adc
#define I2S_WRITE_ADR_DD                           0x0add
#define I2S_WRITE_ADR_DE                           0x0ade
#define I2S_WRITE_ADR_DF                           0x0adf
#define I2S_WRITE_ADR_E0                           0x0ae0
#define I2S_WRITE_ADR_E1                           0x0ae1
#define I2S_WRITE_ADR_E2                           0x0ae2
#define I2S_WRITE_ADR_E3                           0x0ae3
#define I2S_WRITE_ADR_E4                           0x0ae4
#define I2S_WRITE_ADR_E5                           0x0ae5
#define I2S_WRITE_ADR_E6                           0x0ae6
#define I2S_WRITE_ADR_E7                           0x0ae7
#define I2S_WRITE_ADR_E8                           0x0ae8
#define I2S_WRITE_ADR_E9                           0x0ae9
#define I2S_WRITE_ADR_EA                           0x0aea
#define I2S_WRITE_ADR_EB                           0x0aeb
#define I2S_WRITE_ADR_EC                           0x0aec
#define I2S_WRITE_ADR_ED                           0x0aed
#define I2S_WRITE_ADR_EE                           0x0aee
#define I2S_WRITE_ADR_EF                           0x0aef
#define I2S_WRITE_ADR_F0                           0x0af0
#define I2S_WRITE_ADR_F1                           0x0af1
#define I2S_WRITE_ADR_F2                           0x0af2
#define I2S_WRITE_ADR_F3                           0x0af3
#define I2S_WRITE_ADR_F4                           0x0af4
#define I2S_WRITE_ADR_F5                           0x0af5
#define I2S_WRITE_ADR_F6                           0x0af6
#define I2S_WRITE_ADR_F7                           0x0af7
#define I2S_WRITE_ADR_F8                           0x0af8
#define I2S_WRITE_ADR_F9                           0x0af9
#define I2S_WRITE_ADR_FA                           0x0afa
#define I2S_WRITE_ADR_FB                           0x0afb
#define I2S_WRITE_ADR_FC                           0x0afc
#define I2S_WRITE_ADR_FD                           0x0afd
#define I2S_WRITE_ADR_FE                           0x0afe
#define I2S_WRITE_ADR_FF                           0x0aff
//
// Reading file:  vpu_reg.h
//
// synopsys translate_off
// synopsys translate_on
// -------------------------------------------------------------------
// Peripheral 4   (APB slave 4)
// -------------------------------------------------------------------
// -----------------------------------------------
// CBUS_BASE:  VPU_CBUS_BASE = 0x04
// -----------------------------------------------
#define VP_CTRL                                    0x0400
//Bit 31:30      reg_hvsync_int_mux         , unsigned, default = 0
//Bit 29,        reg_fsm_clk_en             , unsigned, default = 1
//Bit 28,        reserved
//Bit 27:25,     reg_pat_new_mode           , 0:old (colorbar, ramp, etc.), 1: triangle, 2:palette, 3 or else: grd9&gry8,. unsigned, default = 1
//Bit 24,        reg_pat_grd9_act_def       .  unsigned, default = 1
//Bit 23,        reg_pat_grd9_dis_def       .  unsigned, default = 1
//Bit 22,        reg_pat_gry8_act_def       .  unsigned, default = 1
//Bit 21,        reg_pat_gry8_dis_def       .  unsigned, default = 1
//Bit 20,        reg_pat_grd9_en            .  unsigned, default = 0
//Bit 19,        reg_pat_gry8_en            .  unsigned, default = 0
//Bit 18,        reg_minlvds_sel            .  unsigned, default = 0
//Bit 17,        reg_vx1lvds_insel          .  unsigned, default = 0
//Bit 16,        reg_gamma_mode             : 0 gamma before blending, 1 gamma after white balance. unsigned, default = 1
//Bit 15,        reserved
//Bit 14,        reg_vx1lvds_en            .   unsigned, default = 0
//Bit 13,        reg_demura_en             .   unsigned, default = 0
//Bit 12,        reg_blend_en              .   unsigned, default = 0
//Bit 11,        reg_sosd_en               .   unsigned, default = 0
//Bit 10,        reg_csc0_en               , set to 0 while reg_pat_en = 0.   unsigned, default = 1
//Bit  9,        reg_dnlp_en               .   unsigned, default = 1
//Bit  8,        reg_csc1_en               .   unsigned, default = 1
//Bit  7,        reg_cm2_en                .   unsigned, default = 0
//Bit  6,        reg_rgbbst_en               enable singnal for rgb contrast and brightness. unsigned, default = 1
//Bit  5,        reg_adj_en                .   unsigned, default = 1
//Bit  4,        reg_wb_en                 : 0 no gain and offset; 1: enable gain and offset.   unsigned, default = 1
//Bit  3,        reg_gamma_en              : 0 no  gamma, 1 enable gamma.   unsigned, default = 1
//Bit  2,        reg_pat_en                .   unsigned, default = 1
//Bit  1,        reg_tmgen_en              .   unsigned, default = 0
//Bit  0,        reg_vpu_en                .   unsigned, default = 0
#define VP_ENM_SYNC_MODE                           0x0401
//Bit 31: 0,    reg_enm_sync_mode          .   unsigned, default = 0
#define VP_GCLK_CTRL                               0x0402
//Bit 31: 0,    reg_gclk_ctrl              .   unsigned, default = 0
#define VP_RAM_MEM_PD                              0x0403
//Bit 31:16,    reg_gclk_ctrl2             .   unsigned, default = 0
//Bit 15: 0,    reg_mem_pd                 .   unsigned, default = 0
#define VP_BYPASS_CTRL                             0x0405
//Bit 31:12,     reserved
//Bit 11,        reg_demura_bypass         .   unsigned, default = 0
//Bit 10,        reg_blend_bypass          .   unsigned, default = 0
//Bit  9,        reg_sosd_bypass           .   unsigned, default = 0
//Bit  8,        reg_csc0_bypass           .   unsigned, default = 0
//Bit  7,        reg_dnlp_bypass           .   unsigned, default = 0
//Bit  6,        reg_csc1_bypass           .   unsigned, default = 0
//Bit  5,        reg_cm2_bypass            .   unsigned, default = 0
//Bit  4,        reg_rgbbst_bypass         .   unsigned, default = 0
//Bit  3,        reg_adj_bypass            .   unsigned, default = 0
//Bit  2,        reg_wb_bypass             .   unsigned, default = 0
//Bit  1,        reg_gamma_bypass          .   unsigned, default = 0
//Bit  0,        reg_pat_bypass            .   unsigned, default = 0
#define VP_BPM_SYNC_MODE                           0x0406
//Bit 31: 0,     reg_bpm_sync_mode          .   unsigned, default = 0
#define VP_IMG_SIZE                                0x0407
//Bit 31:30,     reserved
//Bit 29:16,     reg_img_vsize_m1           .   unsigned, default = 1079
//Bit 15:14,     reserved
//Bit 13: 0,     reg_img_hsize_m1           .   unsigned, default = 1919
#define VP_VDATA_SWAP                              0x0408
//Bit 31:23,     reserved
//Bit 22:20,     reg_vpu_sync_out_sel      .   unsigned, default = 0
//Bit 19,        reserved
//Bit 18:16,     reg_vpu_dbg_sync_sel      .   unsigned, default = 0
//Bit 15:13,     reserved
//Bit 12:8,      reg_vdata_out_swap        .   unsigned, default = 0   [3:0]:0->[d2,d1,d0]; 1->[d2,d0,d1]; 2->[d1,d2,d0]; 3->[d1,d0,d2]; 4->[d0,d2,d1]; 5->[d0,d1,d2];
//Bit 7: 5,      reserved
//Bit 4: 0,      reg_vdata_in_swap         .   unsigned, default = 0   [3:0]:0->[d2,d1,d0]; 1->[d2,d0,d1]; 2->[d1,d2,d0]; 3->[d1,d0,d2]; 4->[d0,d2,d1]; 5->[d0,d1,d2];
#define VP_TMGEN_HTOTAL                            0x040a
//Bit    31,     reg_tmgen_freerun.        .   unsigned, default = 1
//Bit    30,     reg_tmgen_in_hs_vs_aligned .  unsigned, default = 1
//Bit 29:16,     reg_tmgen_vtotal_m1       .   unsigned, default = 1124
//Bit 15:14,     reserved
//Bit 13: 0,     reg_tmgen_htotal_m1       .   unsigned, default = 1099
#define VP_TMGEN_HAVON_H                           0x040b
//Bit 31:30,     reserved
//Bit 29:16,     reg_tmgen_havon_end       .   unsigned, default = 1055
//Bit 15:14,     reserved
//Bit 13: 0,     reg_tmgen_havon_begin     .   unsigned, default = 96
#define VP_TMGEN_VAVON_V                           0x040c
//Bit 31:30,     reserved
//Bit 29:16,     reg_tmgen_vavon_eline     .   unsigned, default = 1120
//Bit 15:14,     reserved
//Bit 13: 0,     reg_tmgen_vavon_bline     .   unsigned, default = 41
#define VP_TMGEN_HSO_H                             0x040d
//Bit 31:30,     reserved
//Bit 29:16,     reg_tmgen_hso_end         .   unsigned, default = 21
//Bit 15:14,     reserved
//Bit 13: 0,     reg_tmgen_hso_begin       .   unsigned, default = 0
#define VP_TMGEN_VSO_H                             0x040e
//Bit 31:30,     reserved
//Bit 29:16,     reg_tmgen_vso_end         .   unsigned, default = 1124
//Bit 15:14,     reserved
//Bit 13: 0,     reg_tmgen_vso_begin       .   unsigned, default = 0
#define VP_TMGEN_VSO_V                             0x040f
//Bit 31:30,     reserved
//Bit 29:16,     reg_tmgen_vso_eline        .   unsigned, default = 4
//Bit 15:14,     reserved
//Bit 13: 0,     reg_tmgen_vso_bline        .   unsigned, default = 0
#define VP_PAT_3D_MOD                              0x0410
//Bit 31:20,     reserved
//Bit 19: 8,     reg_pat_3d_xoffst          need s12 for larger adjustments enough?  signed, default = 10
//Bit  7: 5,     reserved
//Bit  4: 2,     reg_pat_3d_mode            0:no 3d, 1:L/R, 2: T/B, 3:horizontal interleave,4 and else: vertical interleave.  unsigned, default = 0
//Bit  1,        reg_pat_3d_clr_def         0:use generated pat for 3d, 1: define 2 different color for 3d.  unsigned, default = 0
//Bit  0,        reg_pat_3d_ext_mod         0:zero pad, 1: repeat.  unsigned, default = 0
#define VP_PAT_3D_XY_MID                           0x0411
//Bit 31:30,     reserved
//Bit 29:16,     reg_pat_3d_xmid            .   unsigned, default = 960
//Bit 15:14,     reserved
//Bit 13: 0,     reg_pat_3d_ymid            .   unsigned, default = 540
#define VP_PAT_XY_MODE                             0x0412
//Bit 31: 9,     reserved
//Bit  8,        reg_pat_xy_inv             invert x/y coordinates.   unsigned, default = 0
//Bit  7: 5,     reg_pat_xmode              0: raster/bar16/burst; 1; ramp-up; 2/3: 256 gain for this direction. unsigned, default = 1
//Bit  4: 2,     reg_pat_ymode              0: raster/bar16/burst; 1; ramp-up; 2/3: 256 gain for this direction. unsigned, default = 3
//Bit  1,        reg_pat_xinvt              .   unsigned, default = 0
//Bit  0,        reg_pat_yinvt              .   unsigned, default = 0
#define VP_PAT_XY_SCL                              0x0413
//Bit 31:28,     reserved
//Bit 27:16,     reg_pat_xidx_scale         : index scale.   unsigned, default = 34
//Bit 15:12,     reserved
//Bit 11: 0,     reg_pat_yidx_scale         : index scale.   unsigned, default = 60
#define VP_PAT_XY_OF_SHFT                          0x0414
//Bit 31:28,     reserved
//Bit 27:16,     reg_pat_xidx_ofset         : index offset.   unsigned, default = 0
//Bit 15: 4,     reg_pat_yidx_ofset         : index offset.   unsigned, default = 0
//Bit  3: 2,     reg_pat_xidx_rshft         : 0~3.   unsigned, default = 0
//Bit  1: 0,     reg_pat_yidx_rshft         : 0~3.   unsigned, default = 0
#define VP_PAT_XRMP_SCL                            0x0415
//Bit 31:24,     reserved
//Bit 23:16,     reg_pat_xrmp_scalergb0     .   unsigned, default = 255
//Bit 15: 8,     reg_pat_xrmp_scalergb1     .   unsigned, default = 255
//Bit  7: 0,     reg_pat_xrmp_scalergb2     ramp scale.  unsigned, default = 255
#define VP_PAT_YRMP_SCL                            0x0416
//Bit 31:24,     reserved
//Bit 23:16,     reg_pat_yrmp_scalergb0     .   unsigned, default = 255
//Bit 15: 8,     reg_pat_yrmp_scalergb1     .   unsigned, default = 255
//Bit  7: 0,     reg_pat_yrmp_scalergb2     ramp scale.  unsigned, default = 255
#define VP_PAT_BAR_R_0_3                           0x0417
//Bit 31:24,     reg_pat_bar16rgb0_0        .   unsigned, default = 255
//Bit 23:16,     reg_pat_bar16rgb0_1        .   unsigned, default = 255
//Bit 15: 8,     reg_pat_bar16rgb0_2        .   unsigned, default = 0
//Bit  7: 0,     reg_pat_bar16rgb0_3        .   unsigned, default = 0
#define VP_PAT_BAR_R_4_7                           0x0418
//Bit 31:24,     reg_pat_bar16rgb0_4        .   unsigned, default = 255
//Bit 23:16,     reg_pat_bar16rgb0_5        .   unsigned, default = 255
//Bit 15: 8,     reg_pat_bar16rgb0_6        .   unsigned, default = 0
//Bit  7: 0,     reg_pat_bar16rgb0_7        .   unsigned, default = 0
#define VP_PAT_BAR_R_8_11                          0x0419
//Bit 31:24,     reg_pat_bar16rgb0_8        .   unsigned, default = 32
//Bit 23:16,     reg_pat_bar16rgb0_9        .   unsigned, default = 64
//Bit 15: 8,     reg_pat_bar16rgb0_10       .   unsigned, default = 96
//Bit  7: 0,     reg_pat_bar16rgb0_11       .   unsigned, default = 128
#define VP_PAT_BAR_R_12_15                         0x041a
//Bit 31:24,     reg_pat_bar16rgb0_12       .   unsigned, default = 160
//Bit 23:16,     reg_pat_bar16rgb0_13       .   unsigned, default = 192
//Bit 15: 8,     reg_pat_bar16rgb0_14       .   unsigned, default = 224
//Bit  7: 0,     reg_pat_bar16rgb0_15       .   unsigned, default = 255
#define VP_PAT_BAR_G_0_3                           0x041b
//Bit 31:24,     reg_pat_bar16rgb1_0        .   unsigned, default = 255
//Bit 23:16,     reg_pat_bar16rgb1_1        .   unsigned, default = 255
//Bit 15: 8,     reg_pat_bar16rgb1_2        .   unsigned, default = 255
//Bit  7: 0,     reg_pat_bar16rgb1_3        .   unsigned, default = 255
#define VP_PAT_BAR_G_4_7                           0x041c
//Bit 31:24,     reg_pat_bar16rgb1_4        .   unsigned, default = 0
//Bit 23:16,     reg_pat_bar16rgb1_5        .   unsigned, default = 0
//Bit 15: 8,     reg_pat_bar16rgb1_6        .   unsigned, default = 0
//Bit  7: 0,     reg_pat_bar16rgb1_7        .   unsigned, default = 180
#define VP_PAT_BAR_G_8_11                          0x041d
//Bit 31:24,     reg_pat_bar16rgb1_8        .   unsigned, default = 32
//Bit 23:16,     reg_pat_bar16rgb1_9        .   unsigned, default = 64
//Bit 15: 8,     reg_pat_bar16rgb1_10       .   unsigned, default = 96
//Bit  7: 0,     reg_pat_bar16rgb1_11       .   unsigned, default = 128
#define VP_PAT_BAR_G_12_15                         0x041e
//Bit 31:24,     reg_pat_bar16rgb1_12       .   unsigned, default = 160
//Bit 23:16,     reg_pat_bar16rgb1_13       .   unsigned, default = 192
//Bit 15: 8,     reg_pat_bar16rgb1_14       .   unsigned, default = 224
//Bit  7: 0,     reg_pat_bar16rgb1_15       .   unsigned, default = 255
#define VP_PAT_BAR_B_0_3                           0x041f
//Bit 31:24,     reg_pat_bar16rgb2_0        .   unsigned, default = 255
//Bit 23:16,     reg_pat_bar16rgb2_1        .   unsigned, default = 0
//Bit 15: 8,     reg_pat_bar16rgb2_2        .   unsigned, default = 255
//Bit  7: 0,     reg_pat_bar16rgb2_3        .   unsigned, default = 0
#define VP_PAT_BAR_B_4_7                           0x0420
//Bit 31:24,     reg_pat_bar16rgb2_4        .   unsigned, default = 255
//Bit 23:16,     reg_pat_bar16rgb2_5        .   unsigned, default = 0
//Bit 15: 8,     reg_pat_bar16rgb2_6        .   unsigned, default = 255
//Bit  7: 0,     reg_pat_bar16rgb2_7        .   unsigned, default = 0
#define VP_PAT_BAR_B_8_11                          0x0421
//Bit 31:24,     reg_pat_bar16rgb2_8        .   unsigned, default = 32
//Bit 23:16,     reg_pat_bar16rgb2_9        .   unsigned, default = 64
//Bit 15: 8,     reg_pat_bar16rgb2_10       .   unsigned, default = 96
//Bit  7: 0,     reg_pat_bar16rgb2_11       .   unsigned, default = 128
#define VP_PAT_BAR_B_12_15                         0x0422
//Bit 31:24,     reg_pat_bar16rgb2_12       .   unsigned, default = 160
//Bit 23:16,     reg_pat_bar16rgb2_13       .   unsigned, default = 192
//Bit 15: 8,     reg_pat_bar16rgb2_14       .   unsigned, default = 224
//Bit  7: 0,     reg_pat_bar16rgb2_15       .   unsigned, default = 255
#define VP_GRD9_XY_SZ                              0x0423
//Bit 31:30,     reserved
//Bit 29:16,     reg_pat_grd9_xsize         .   unsigned, default = 231
//Bit 15:14,     reserved
//Bit 13: 0,     reg_pat_grd9_ysize         .   unsigned, default = 130
#define VP_GRD9_XY_ST0                             0x0424
//Bit 31:30,     reserved
//Bit 29:16,     reg_pat_grd9_xstart0       .   unsigned, default = 98
//Bit 15:14,     reserved
//Bit 13: 0,     reg_pat_grd9_ystart0       .   unsigned, default = 55
#define VP_GRD9_XY_ST1                             0x0425
//Bit 31:30,     reserved
//Bit 29:16,     reg_pat_grd9_xstart1        .   unsigned, default = 845
//Bit 15:14,     reserved
//Bit 13: 0,     reg_pat_grd9_ystart1        .   unsigned, default = 475
#define VP_GRD9_XY_ST2                             0x0426
//Bit 31:30,     reserved
//Bit 29:16,     reg_pat_grd9_xstart2        .   unsigned, default = 1591
//Bit 15:14,     reserved
//Bit 13: 0,     reg_pat_grd9_ystart2        .   unsigned, default = 895
#define VP_GRY8_XY_SZ                              0x0427
//Bit 31:30,     reserved
//Bit 29:16,     reg_pat_gry8_xsize          .   unsigned, default = 192
//Bit 15:14,     reserved
//Bit 13: 0,     reg_pat_gry8_ysize          .   unsigned, default = 108
#define VP_GRY8_XY_ST0                             0x0428
//Bit 31:30,     reserved
//Bit 29:16,     reg_pat_gry8_xstart0        .   unsigned, default = 576
//Bit 15:14,     reserved
//Bit 13: 0,     reg_pat_gry8_ystart0        .   unsigned, default = 216
#define VP_GRY8_XY_ST1                             0x0429
//Bit 31:30,     reserved
//Bit 29:16,     reg_pat_gry8_xstart1        .   unsigned, default = 576
//Bit 15:14,     reserved
//Bit 13: 0,     reg_pat_gry8_ystart1        .   unsigned, default = 756
#define VP_CIR15_RAD                               0x042a
//Bit 31:16,     reserved
//Bit 15: 2,     reg_pat_cir15_rad           .   unsigned, default = 60
//Bit  1,        reg_pat_cir15_mode              0: circle, 1: rectangle.   unsigned, default = 0
//Bit  0,        reg_pat_cir15_en            .   unsigned, default = 0
#define VP_CIR15_SQ_RAD                            0x042b
//Bit 31:28,     reserved
//Bit 27: 0,     reg_pat_cir15_sqrad         should be (reg_pat_cir15_rad*reg_pat_cir15_rad).  unsigned, default = 3600
#define VP_CIR15_X01                               0x042c
//Bit 31:30,     reserved
//Bit 29:16,     reg_pat_cir15_xcent0       .   unsigned, default = 190
//Bit 15:14,     reserved
//Bit 13: 0,     reg_pat_cir15_xcent1       .   unsigned, default = 570
#define VP_CIR15_X23                               0x042d
//Bit 31:30,     reserved
//Bit 29:16,     reg_pat_cir15_xcent2       .   unsigned, default = 960
//Bit 15:14,     reserved
//Bit 13: 0,     reg_pat_cir15_xcent3       .   unsigned, default = 1340
#define VP_CIR15_X4_Y0                             0x042e
//Bit 31:30,     reserved
//Bit 29:16,     reg_pat_cir15_xcent4       .   unsigned, default = 1720
//Bit 15:14,     reserved
//Bit 13: 0,     reg_pat_cir15_ycent0       .   unsigned, default = 190
#define VP_CIR15_Y12                               0x042f
//Bit 31:30,     reserved
//Bit 29:16,     reg_pat_cir15_ycent1       .   unsigned, default = 540
//Bit 15:14,     reserved
//Bit 13: 0,     reg_pat_cir15_ycent2       .   unsigned, default = 900
#define VP_TRI_CTRL                                0x0430
//Bit 31:16,     reg_pat_tri_slp            .   signed, default = 3639
//Bit 15: 0,     reg_pat_tri_keypt          .   signed, default = 0
#define VP_CSC0_OFF_INP01                          0x0440
//Bit 31:27,     reserved
//Bit 26:16,     reg_csc0_offst_inp0         .     signed, default = 0
//Bit 15:11,     reserved
//Bit 10: 0,     reg_csc0_offst_inp1         .     signed, default = 0
#define VP_CSC0_OFF_INP2                           0x0441
//Bit 31:11,     reserved
//Bit 10: 0,     reg_csc0_offst_inp2         .     signed, default = 0
#define VP_CSC0_MTRX_00_01                         0x0442
//Bit 31:26,     reserved
//Bit 25:16,     reg_csc0_matrix0_0          .     signed, default = 66
//Bit 15:10,     reserved
//Bit  9: 0,     reg_csc0_matrix0_1          .     signed, default = 129
#define VP_CSC0_MTRX_02_10                         0x0443
//Bit 31:26,     reserved
//Bit 25:16,     reg_csc0_matrix0_2          .     signed, default = 15
//Bit 15:10,     reserved
//Bit  9: 0,     reg_csc0_matrix1_0          .     signed, default = -38
#define VP_CSC0_MTRX_11_12                         0x0444
//Bit 31:26,     reserved
//Bit 25:16,     reg_csc0_matrix1_1          .     signed, default = -74
//Bit 15:10,     reserved
//Bit  9: 0,     reg_csc0_matrix1_2          .     signed, default = 113
#define VP_CSC0_MTRX_20_21                         0x0445
//Bit 31:26,     reserved
//Bit 25:16,     reg_csc0_matrix2_0          .     signed, default = 112
//Bit 15:10,     reserved
//Bit  9: 0,     reg_csc0_matrix2_1          .     signed, default = -94
#define VP_CSC0_MTRX_22_OFF_OUP0                   0x0446
//Bit 31:27,     reserved
//Bit 26:16,     reg_csc0_offst_oup0         .     signed, default = 64
//Bit 15:10,     reserved
//Bit  9: 0,     reg_csc0_matrix2_2          .     signed, default = -18
#define VP_CSC0_OFF_OUP12                          0x0447
//Bit 31:30,     reserved
//Bit 29:27,     reg_csc0_matrix_rs         0 s3: -2~3, 0 s3.8; 1: s2.9; 2: s1.10 3:s0.11.  signed, default = 0
//Bit 26:16,     reg_csc0_offst_oup1         .     signed, default = 512
//Bit 15:11,     reserved
//Bit 10: 0,     reg_csc0_offst_oup2         .     signed, default = 512
#define VP_CSC1_OFF_INP01                          0x0448
//Bit 31:27,     reserved
//Bit 26:16,     reg_csc1_offst_inp0         .     signed, default = -64
//Bit 15:11,     reserved
//Bit 10: 0,     reg_csc1_offst_inp1         .     signed, default = -512
#define VP_CSC1_OFF_INP2                           0x0449
//Bit 31:11,     reserved
//Bit 10: 0,     reg_csc1_offst_inp2         .     signed, default = -512
#define VP_CSC1_MTRX_00_01                         0x044a
//Bit 31:26,     reserved
//Bit 25:16,     reg_csc1_matrix0_0          .     signed, default = 149
//Bit 15:10,     reserved
//Bit  9: 0,     reg_csc1_matrix0_1          .     signed, default = 0
#define VP_CSC1_MTRX_02_10                         0x044b
//Bit 31:26,     reserved
//Bit 25:16,     reg_csc1_matrix0_2          .     signed, default = 204
//Bit 15:10,     reserved
//Bit  9: 0,     reg_csc1_matrix1_0          .     signed, default = 149
#define VP_CSC1_MTRX_11_12                         0x044c
//Bit 31:26,     reserved
//Bit 25:16,     reg_csc1_matrix1_1          .     signed, default = -50
//Bit 15:10,     reserved
//Bit  9: 0,     reg_csc1_matrix1_2          .     signed, default = -104
#define VP_CSC1_MTRX_20_21                         0x044d
//Bit 31:26,     reserved
//Bit 25:16,     reg_csc1_matrix2_0          .     signed, default = 149
//Bit 15:10,     reserved
//Bit  9: 0,     reg_csc1_matrix2_1          .     signed, default = 258
#define VP_CSC1_MTRX_22_OFF_OUP0                   0x044e
//Bit 31:27,     reserved
//Bit 26:16,     reg_csc1_offst_oup0         .     signed, default = 0
//Bit 15:10,     reserved
//Bit  9: 0,     reg_csc1_matrix2_2          .     signed, default = 0
#define VP_CSC1_OFF_OUP12                          0x044f
//Bit 31:30,     reserved
//Bit 29:27,     reg_csc1_matrix_rs         0 s3: -2~3, 0 s3.8; 1: s2.9; 2: s1.10 3:s0.11.  signed, default = -1
//Bit 26:16,     reg_csc1_offst_oup1         .     signed, default = 0
//Bit 15:11,     reserved
//Bit 10: 0,     reg_csc1_offst_oup2         .     signed, default = 0
#define VP_BST                                     0x0450
//Bit 31:27,     reserved
//Bit 26:16,     reg_adj_brightness          , too much?.    signed, default = 0
//Bit 15: 9,     reserved
//Bit  8: 0,     reg_adj_contrast            , [0,2), normalized 256 as '1', enough for [0,2)?.   unsigned, default = 256
#define VP_BLK_LEVEL                               0x0451
//Bit 31: 8,     reserved
//Bit  7: 0,     reg_adj_blacklevel          (black level to be subsctracted, 64 as default).   unsigned, default = 64
#define VP_WB_GAIN01                               0x0452
//Bit 31:27,     reserved
//Bit 26:16,     reg_wb_gain0                : gains to three components,1.10, [0,2).   unsigned, default = 1024
//Bit 15:11,     reserved
//Bit 10: 0,     reg_wb_gain1                : gains to three components,1.10, [0,2).   unsigned, default = 1024
#define VP_WB_GAIN2_PRE_OFF0                       0x0453
//Bit 31:27,     reserved
//Bit 26:16,     reg_wb_gain2                : gains to three components,1.10, [0,2).   unsigned, default = 1024
//Bit 15:11,     reserved
//Bit 10: 0,     reg_wb_pre_offset0          : offset to the input components, [-1024,1023].  signed, default = 0
#define VP_WB_PRE_OFF12                            0x0454
//Bit 31:27,     reserved
//Bit 26:16,     reg_wb_pre_offset1          : offset to the input components, [-1024,1023].  signed, default = 0
//Bit 15:11,     reserved
//Bit 10: 0,     reg_wb_pre_offset2          : offset to the input components, [-1024,1023].  signed, default = 0
#define VP_WB_OFF01                                0x0455
//Bit 31:27,     reserved
//Bit 26:16,     reg_wb_offset0              : offset to the output components, [-1024,1023].  signed, default = 0
//Bit 15:11,     reserved
//Bit 10: 0,     reg_wb_offset1              : offset to the output components, [-1024,1023].  signed, default = 0
#define VP_WB_OFF2                                 0x0456
//Bit 31:11,     reserved
//Bit 10: 0,     reg_wb_offset2              : offset to the output components, [-1024,1023].     signed, default = 0
#define VP_RGB_CTRST                               0x0457
//Bit 31:28,     reserved
//Bit 27:16,     reg_rgb_ctrst               : contrast in rgb..   unsigned, default = 1024
//Bit 15:12,     reserved
//Bit 11: 2,     reg_rgb_ctrst_blklvl        : contrast blacklevel to be substract before and addback after gain operation. unsigned, default = 64
//Bit  1,        reserved
//Bit  0,        reg_rgb_ctrst_prt           : enable signal to protect saturation in rgb during contrast adjustment. unsigned, default = 1
#define VP_RGB_BRGHT                               0x0458
//Bit 31:14,     reserved
//Bit 13: 2,     reg_rgb_brght               : brightness level in rgb domain.  signed, default = 0
//Bit  1,        reg_rgb_brght_prt           : enalbe signal to protect saturation in rgb during brightness adjustment. unsigned, default = 1
//Bit  0,        reg_rgb_ctrst_dlut_x2       : enable to do x2 to the dlut cells before subtracting from normalized gain_max. unsigned, default = 0
#define VP_RGB_DLUT_0_3                            0x0459
//Bit 31:24,     reg_rgb_ctrst_dlut0         .   unsigned, default = 255
//Bit 23:16,     reg_rgb_ctrst_dlut1         .   unsigned, default = 205
//Bit 15: 8,     reg_rgb_ctrst_dlut2         .   unsigned, default = 171
//Bit  7: 0,     reg_rgb_ctrst_dlut3         .   unsigned, default = 147
#define VP_RGB_DLUT_4_7                            0x045a
//Bit 31:24,     reg_rgb_ctrst_dlut4         .   unsigned, default = 128
//Bit 23:16,     reg_rgb_ctrst_dlut5         .   unsigned, default = 113
//Bit 15: 8,     reg_rgb_ctrst_dlut6         .   unsigned, default = 102
//Bit  7: 0,     reg_rgb_ctrst_dlut7         .   unsigned, default = 93
#define VP_RGB_DLUT_8_11                           0x045b
//Bit 31:24,     reg_rgb_ctrst_dlut8         .   unsigned, default = 85
//Bit 23:16,     reg_rgb_ctrst_dlut9         .   unsigned, default = 78
//Bit 15: 8,     reg_rgb_ctrst_dlut10        .   unsigned, default = 73
//Bit  7: 0,     reg_rgb_ctrst_dlut11        .   unsigned, default = 68
//LUT/RAM port
#define VP_LUT_ADDR_PORT                           0x045e
#define VP_LUT_DATA_PORT                           0x045f
#define VP_DEMURA_CTRL                             0x0460
//Bit 31:29, reserved
//Bit 28:16, reg_dm_leak_light               .   unsigned, default=0
//Bit 15:14, reserved
//Bit 13:4,  reg_dm_threshold                .   unsigned, default=0
//Bit  3:1,  reg_dm_res_sel                  .   unsigned, default=0
//Bit    0,  reg_dm_bwidth_sel               .   unsigned, default=0
#define VP_DEMURA_DEBUG                            0x0461
//Bit 31:20, reserved
//Bit 19:16, reg_dm_lutwr_mode.              .   unsigned, default=0
//Bit 15:8,  reserved
//Bit  7:0,  reg_dm_debug_sel                .   unsigned, default=0
#define VP_TM_RCVY_VSYNC                           0x046a
//Bit 31:30, reserved
//Bit 29:16, reg_tm_rcvy_vs_vstart           .   unsigned, default=0
//Bit 15:14, reserved
//Bit  13:0,  reg_tm_rcvy_vs_vend            .   unsigned, default=0
#define VP_TM_RCVY_HSYNC                           0x046b
//Bit 31:30, reserved
//Bit 29:16, reg_tm_rcvy_hs_hstart           .   unsigned, default=0
//Bit 15:14, reserved
//Bit 13:0,  reg_tm_rcvy_hs_hend             .   unsigned, default=0
#define VP_TM_RCVY_CTRL                            0x046c
//Bit   31,  reg_tm_rcvy_en		     .   unsigned, default=0
//Bit   30,  reg_tm_rcvy_go_fld_dly_en	     .   unsigned, default=0
//Bit 29:16, reg_tm_rcvy_go_fld_hstart       .   unsigned, default=0
//Bit   15,  reg_tm_rcvy_force_go_fld_val    .   unsigned, default=0
//Bit   14,  reg_tm_rcvy_force_go_fld        .   unsigned, default=0
//Bit 13:0,  reg_tm_rcvy_go_fld_vstart	     .   unsigned, default=0
//CM2 port
#define VP_CM2_ADDR_PORT                           0x04dc
#define VP_CM2_DATA_PORT                           0x04dd
//
// Reading file:  chroma_reg.h
//
//**********************************************************************************
//* Copyright (c) 2008, AMLOGIC Inc.
//* All rights reserved
//**********************************************************************************
//* File :  chroma_reg.v
//* Author : Terrence Wang
//* Date : Dec 2008
//* Description :
//*
//**********************************************************************************
//* Modification History:
//* Date    Modified By         Reason
//**********************************************************************************
// synopsys translate_off
// synopsys translate_on
#define VPP_CHROMA_ADDR_PORT                       0x0470
#define VPP_CHROMA_DATA_PORT                       0x0471
//`define CHROMA_ADDR_PORT        8'h67
//`define CHROMA_DATA_PORT        8'h68

//  CHROMA_GAIN_REG_XX(00-07)
//  hue gain, sat gain function control
//  Bit 31      reg_sat_en                  enable sat adjustment in current region
//  Bit 27      reg_sat_increase            sat adjustment increase or decrease
//                                          1'b1: increase  1'b0: decrease
//  Bit 26:25   reg_sat_central_en          sat adjustment with central biggest or one side biggest
//                                          2'b01 central biggest   2'b00 one side biggest
//  Bit 24      reg_sat_shape               when sat adjustment one side biggest, define left or right
//                                          1'b1: left side biggest 1'b0 right side biggest
//  Bit 23:16   reg_sat_gain                define the sat gain when sat adjustment
//                                          0x00-0xff
//  Bit 15      reg_hue_en                  enable hue adjustment in current region
//  Bit 11      reg_hue_clockwise           hue adjustment clockwise or anti-clockwise
//                                          1'b1: clockwise 1'b0: anti-clockwise
//  Bit 10:9    reg_hue_central_en          when hue adjustment, parabola curve or non-symmetry curve
//                                          1'b1: parabola curve    1'b0: non-symmetry curve
//  Bit 8       reg_hue_shape               when non-symmetry curve, define which side change more
//                                          1'b1: right side change more    1'b0: left side change more
//  Bit 7:0     reg_hue_gain                define the hue gain when hue adjustment
//                                          0x00-0x80, note: should be no bigger than 0x80

    #define CHROMA_GAIN_REG00       0x00


//  HUE_HUE_RANGE_REG_XX(00-07)
//  hue range select
//  Bit 31:24   no use now
//  Bit 23:16   reg_hue_shift_range         define the angle of target region
//                                          0x00-0xff,(0x100 means 120 degree though it can not be set)
//                                          must be greater or equal than 8'd8
//  Bit 15      reg_symmetry_en             this is used for create one symmetry region
//                                          the symmetry region hue_shift_start = reg_hue_hue_shift_start + reg_hue_shift_range<<5
//                                          the symmetry region hue_shift_range = reg_hue_shift_range
//                                          in symmetry region, all the sat and hue setting will be same with original region,
//                                          except reg_hue_shape, reg_sat_shape, reg_hue_clockwise will be reversed
//  Bit 14:0    reg_hue_hue_shift_start     define the start angle of target region
//                                          0x6000 means 360 degree
//                                          only region 0 and 1 can exceed 360 degrees.

    #define HUE_HUE_RANGE_REG00     0x01


//  HUE_RANGE_INV_REG_XX
//  Calculation should be follow
//  HUE_RANGE_INV_REG0X[15:0] = ((1<<20)/HUE_HUE_RANGE_REG0X[23:16]+1)>>1
//  HUE_RANGE_INV_REG_XX is to used to save divider

    #define HUE_RANGE_INV_REG00     0x02



//  for belowing each low, high, low_slope, high_slope group:
//            a_____________b
//            /             \               a = low  + 2^low_slope
//           /               \              b = high - 2^high_slope
//          /                 \             low_slope <= 7; high_slope <= 7
//         /                   \            b >= a
//  ______/_____________________\________
//       low                    high
//
//
//  HUE_LUM_RANGE_REG_XX(00-07)
//  luma range selection for hue adjustment
//  Bit 31:24   reg_sat_lum_low             define the low level of luma value for sat adjustment
//                                          0x00-0xff
//  Bit 23:20   reg_hue_lum_high_slope      define the slope area below high level of luma value for hue adjustment
//                                          0x00-0x07
//  Bit 19:16   reg_hue_lum_low_slope       define the slope area above low  level of luma value for hue adjustment
//                                          0x00-0x07
//  Bit 15:8    reg_hue_lum_high            define the high level of luma value for hue adjustment
//                                          0x00-0xff
//  Bit 7:0     reg_hue_lum_low             define the low  level of luma value for hue adjustment
//                                          0x00-0xff

    #define HUE_LUM_RANGE_REG00     0x03

//  HUE_SAT_RANGE_REG_XX(00-07)
//  sat range selection for hue adjustment
//  Bit 31:24   reg_sat_lum_high            define the high level of luma value for sat adjustment
//                                          0x00-0xff
//  Bit 23:20   reg_hue_sat_high_slope      define the slope area below high level of sat value for hue adjustment
//                                          0x00-0x07
//  Bit 19:16   reg_hue_sat_low_slope       define the slope area above low  level of sat value for hue adjustment
//                                          0x00-0x07
//  Bit 15:8    reg_hue_sat_high            define the high level of sat value for hue adjustment
//                                          0x00-0xff
//  Bit 7:0     reg_hue_sat_low             define the low  level of sat value for hue adjustment
//                                          0x00-0xff

    #define HUE_SAT_RANGE_REG00     0x04

//  SAT_SAT_RANGE_REG_XX(00-07)
//  sat range selection for hue adjustment
//  Bit 31:28   reg_sat_lum_high_slope      define the slope area below high level of luma value for sat adjustment
//                                          0x00-0x07
//  Bit 27:24   reg_sat_lum_low_slope       define the slope area above low  level of luma value for sat adjustment
//                                          0x00-0x07
//  Bit 23:20   reg_sat_sat_high_slope      define the slope area below high level of sat value for sat adjustment
//                                          0x00-0x07
//  Bit 19:16   reg_sat_sat_low_slope       define the slope area above low  level of sat value for sat adjustment
//                                          0x00-0x07
//  Bit 15:8    reg_sat_sat_high            define the high level of sat value for sat adjustment
//                                          0x00-0xff
//  Bit 7:0     reg_sat_sat_low             define the low  level of sat value for sat adjustment
//                                          0x00-0xff

    #define SAT_SAT_RANGE_REG00     0x05


    #define CHROMA_GAIN_REG01       0x06
    #define HUE_HUE_RANGE_REG01     0x07
    #define HUE_RANGE_INV_REG01     0x08
    #define HUE_LUM_RANGE_REG01     0x09
    #define HUE_SAT_RANGE_REG01     0x0a
    #define SAT_SAT_RANGE_REG01     0x0b

    #define CHROMA_GAIN_REG02       0x0c
    #define HUE_HUE_RANGE_REG02     0x0d
    #define HUE_RANGE_INV_REG02     0x0e
    #define HUE_LUM_RANGE_REG02     0x0f
    #define HUE_SAT_RANGE_REG02     0x10
    #define SAT_SAT_RANGE_REG02     0x11


    #define CHROMA_GAIN_REG03       0x12
    #define HUE_HUE_RANGE_REG03     0x13
    #define HUE_RANGE_INV_REG03     0x14
    #define HUE_LUM_RANGE_REG03     0x15
    #define HUE_SAT_RANGE_REG03     0x16
    #define SAT_SAT_RANGE_REG03     0x17

    #define CHROMA_GAIN_REG04       0x18
    #define HUE_HUE_RANGE_REG04     0x19
    #define HUE_RANGE_INV_REG04     0x1a
    #define HUE_LUM_RANGE_REG04     0x1b
    #define HUE_SAT_RANGE_REG04     0x1c
    #define SAT_SAT_RANGE_REG04     0x1d

    #define CHROMA_GAIN_REG05       0x1e
    #define HUE_HUE_RANGE_REG05     0x1f
    #define HUE_RANGE_INV_REG05     0x20
    #define HUE_LUM_RANGE_REG05     0x21
    #define HUE_SAT_RANGE_REG05     0x22
    #define SAT_SAT_RANGE_REG05     0x23

    #define CHROMA_GAIN_REG06       0x24
    #define HUE_HUE_RANGE_REG06     0x25
    #define HUE_RANGE_INV_REG06     0x26
    #define HUE_LUM_RANGE_REG06     0x27
    #define HUE_SAT_RANGE_REG06     0x28
    #define SAT_SAT_RANGE_REG06     0x29

    #define CHROMA_GAIN_REG07       0x2a
    #define HUE_HUE_RANGE_REG07     0x2b
    #define HUE_RANGE_INV_REG07     0x2c
    #define HUE_LUM_RANGE_REG07     0x2d
    #define HUE_SAT_RANGE_REG07     0x2e
    #define SAT_SAT_RANGE_REG07     0x2f

//  REG_CHROMA_CONTROL
//  Bit 31      reg_chroma_en               enable color manage function
//                                          1'b1: enable    1'b0: bypass
//  Bit 6       sat_sel                     uv_max or u^2+v^2 selected as sat for reference
//                                          1'b1: uv_max(default)   1'b0: u^2+v^2
//  Bit 5       uv_adj_en                   final uv_adjust enable
//                                          1'b1: enable    1'b0: bypass
//  Bit 2       hue_en                      rgb to hue enable
//                                          1'b1: enable(default)   1'b0: bypass
//  Bit 1:0     csc_sel                     define input YUV with different color type
//                                          2'b00: 601(16-235)  2'b01: 709(16-235)
//                                          2'b10: 601(0-255)   2'b11: 709(0-255)
    #define REG_CHROMA_CONTROL      0x30   // default 32h'80000024
    #define REG_DEMO_CENTER_BAR     0x31   // default 32h'0
    #define REG_DEMO_HLIGHT_MODE    0x32   // default 32h'0
    #define REG_DEMO_OWR_DATA       0x33   // default 32h'0


////===========================================////
//// CM2 ADDR
////===========================================////

    #define SAT_BYYB_NODE_REG0          0x200   // default 32'h0
    #define SAT_BYYB_NODE_REG1          0x201   // default 32'h0
    #define SAT_BYYB_NODE_REG2          0x202   // default 32'h0
    #define SAT_SRC_NODE_REG            0x203   // default 32'h0
    #define CM_ENH_SFT_MODE_REG         0x204   // default 32'h0
    #define FRM_SIZE_REG                0x205   // default 32'h0
    #define FITLER_CFG_REG              0x206   // default 32'h0
    #define CM_GLOBAL_GAIN_REG          0x207   // default 32'h0
    #define CM_ENH_CTL_REG              0x208   // default 32'h0

    #define ROI_X_SCOPE_REG             0x209   // default 32'h0
    #define ROI_Y_SCOPE_REG             0x20a   // default 32'h0
    #define POI_XY_DIR_REG              0x20b   // default 32'h0
    #define COI_Y_SCOPE_REG             0x20c   // default 32'h0
    #define COI_H_SCOPE_REG             0x20d   // default 32'h0
    #define COI_S_SCOPE_REG             0x20e   // default 32'h0
    #define IFO_MODE_REG                0x20f   // default 32'h0
    #define POI_RPL_MODE_REG            0x210   // default 32'h0
    #define DEMO_OWR_YHS_REG            0x211   // default 32'h0
    #define DEMO_POI_Y_REG              0x212   // default 32'h0
    #define DEMO_POI_H_REG              0x213   // default 32'h0
    #define DEMO_POI_S_REG              0x214   // default 32'h0
    //#define LUMA_BYH_LIMT_REG           0x215   // default 32'h0
    #define LUMA_ADJ_LIMT_REG           0x215   // default 32'h0
    #define SAT_ADJ_LIMT_REG            0x216   // default 32'h0
    #define HUE_ADJ_LIMT_REG            0x217   // default 32'h0
    #define UVHS_OFST_REG               0x218   // default 32'h0
    #define HUE_CFG_PARA_REG            0x219   // default 32'h0
    #define DEMO_SPLT_CFG_REG           0x21a   // default 32'h0
    #define DEMO_SPLT_YHS_REG           0x21b   // default 32'h0

////========= NODE 0 COEFFICIENT ==============////

    #define REG_CM2_ENH_COEFF0_H00      0x100   // default 32'H0
                                                  // [ 7: 0] : luma_byh_hx   / [15: 8] : sat_byhs_s0hx
                                                  // [23:16] : sat_byhs_s0hx / [31:24] : sat_byhs_s2hx
    #define REG_CM2_ENH_COEFF1_H00      0x101   // default 32'H0
                                                  // [ 7: 0] : hue_byh_hx   / [15: 8] : hue_byy_y0hx
                                                  // [23:16] : hue_byy_y1hx / [31:24] : hue_byy_y2hx
    #define REG_CM2_ENH_COEFF2_H00      0x102   // default 32'H0
                                                  // [ 7: 0] : hue_byy_y3hx / [15: 8] : hue_byy_y4hx
                                                  // [23:16] : hue_bys_s0hx / [31:24] : hue_bys_s1hx
    #define REG_CM2_ENH_COEFF3_H00      0x103   // default 32'H0
                                                  // [ 7: 0] : hue_bys_s2hx / [15: 8] : hue_bys_s3hx
                                                  // [23:16] : hue_bys_s4hx / [31:24] : hue_byya_y0hx
    #define REG_CM2_ENH_COEFF4_H00      0x104   // default 32'H0
                                                  // [ 7: 0] : hue_byya_y1hx / [15: 8] : hue_byya_y2hx
                                                  // [23:16] : hue_byya_y3hx / [31:24] : hue_byya_y4hx

////========= NODE 1 COEFFICIENT ==============////

    #define REG_CM2_ENH_COEFF0_H01      0x108   // default 32'H0
                                                  // [ 7: 0] : luma_byh_hx   / [15: 8] : sat_byhs_s0hx
                                                  // [23:16] : sat_byhs_s0hx / [31:24] : sat_byhs_s2hx
    #define REG_CM2_ENH_COEFF1_H01      0x109   // default 32'H0
                                                  // [ 7: 0] : hue_byh_hx   / [15: 8] : hue_byy_y0hx
                                                  // [23:16] : hue_byy_y1hx / [31:24] : hue_byy_y2hx
    #define REG_CM2_ENH_COEFF2_H01      0x10a   // default 32'H0
                                                  // [ 7: 0] : hue_byy_y3hx / [15: 8] : hue_byy_y4hx
                                                  // [23:16] : hue_bys_s0hx / [31:24] : hue_bys_s1hx
    #define REG_CM2_ENH_COEFF3_H01      0x10b   // default 32'H0
                                                  // [ 7: 0] : hue_bys_s2hx / [15: 8] : hue_bys_s3hx
                                                  // [23:16] : hue_bys_s4hx / [31:24] : hue_byya_y0hx
    #define REG_CM2_ENH_COEFF4_H01      0x10c   // default 32'H0
                                                  // [ 7: 0] : hue_byya_y1hx / [15: 8] : hue_byya_y2hx
                                                  // [23:16] : hue_byya_y3hx / [31:24] : hue_byya_y4hx

////========= NODE 2 COEFFICIENT ==============////

    #define REG_CM2_ENH_COEFF0_H02      0x110   // default 32'H0
                                                  // [ 7: 0] : luma_byh_hx   / [15: 8] : sat_byhs_s0hx
                                                  // [23:16] : sat_byhs_s0hx / [31:24] : sat_byhs_s2hx
    #define REG_CM2_ENH_COEFF1_H02      0x111   // default 32'H0
                                                  // [ 7: 0] : hue_byh_hx   / [15: 8] : hue_byy_y0hx
                                                  // [23:16] : hue_byy_y1hx / [31:24] : hue_byy_y2hx
    #define REG_CM2_ENH_COEFF2_H02      0x112   // default 32'H0
                                                  // [ 7: 0] : hue_byy_y3hx / [15: 8] : hue_byy_y4hx
                                                  // [23:16] : hue_bys_s0hx / [31:24] : hue_bys_s1hx
    #define REG_CM2_ENH_COEFF3_H02      0x113   // default 32'H0
                                                  // [ 7: 0] : hue_bys_s2hx / [15: 8] : hue_bys_s3hx
                                                  // [23:16] : hue_bys_s4hx / [31:24] : hue_byya_y0hx
    #define REG_CM2_ENH_COEFF4_H02      0x114   // default 32'H0
                                                  // [ 7: 0] : hue_byya_y1hx / [15: 8] : hue_byya_y2hx
                                                  // [23:16] : hue_byya_y3hx / [31:24] : hue_byya_y4hx

////========= NODE 3 COEFFICIENT ==============////

    #define REG_CM2_ENH_COEFF0_H03      0x118   // default 32'H0
                                                  // [ 7: 0] : luma_byh_hx   / [15: 8] : sat_byhs_s0hx
                                                  // [23:16] : sat_byhs_s0hx / [31:24] : sat_byhs_s2hx
    #define REG_CM2_ENH_COEFF1_H03      0x119   // default 32'H0
                                                  // [ 7: 0] : hue_byh_hx   / [15: 8] : hue_byy_y0hx
                                                  // [23:16] : hue_byy_y1hx / [31:24] : hue_byy_y2hx
    #define REG_CM2_ENH_COEFF2_H03      0x11a   // default 32'H0
                                                  // [ 7: 0] : hue_byy_y3hx / [15: 8] : hue_byy_y4hx
                                                  // [23:16] : hue_bys_s0hx / [31:24] : hue_bys_s1hx
    #define REG_CM2_ENH_COEFF3_H03      0x11b   // default 32'H0
                                                  // [ 7: 0] : hue_bys_s2hx / [15: 8] : hue_bys_s3hx
                                                  // [23:16] : hue_bys_s4hx / [31:24] : hue_byya_y0hx
    #define REG_CM2_ENH_COEFF4_H03      0x11c   // default 32'H0
                                                  // [ 7: 0] : hue_byya_y1hx / [15: 8] : hue_byya_y2hx
                                                  // [23:16] : hue_byya_y3hx / [31:24] : hue_byya_y4hx

////========= NODE 4 COEFFICIENT ==============////

    #define REG_CM2_ENH_COEFF0_H04      0x120   // default 32'H0
                                                  // [ 7: 0] : luma_byh_hx   / [15: 8] : sat_byhs_s0hx
                                                  // [23:16] : sat_byhs_s0hx / [31:24] : sat_byhs_s2hx
    #define REG_CM2_ENH_COEFF1_H04      0x121   // default 32'H0
                                                  // [ 7: 0] : hue_byh_hx   / [15: 8] : hue_byy_y0hx
                                                  // [23:16] : hue_byy_y1hx / [31:24] : hue_byy_y2hx
    #define REG_CM2_ENH_COEFF2_H04      0x122   // default 32'H0
                                                  // [ 7: 0] : hue_byy_y3hx / [15: 8] : hue_byy_y4hx
                                                  // [23:16] : hue_bys_s0hx / [31:24] : hue_bys_s1hx
    #define REG_CM2_ENH_COEFF3_H04      0x123   // default 32'H0
                                                  // [ 7: 0] : hue_bys_s2hx / [15: 8] : hue_bys_s3hx
                                                  // [23:16] : hue_bys_s4hx / [31:24] : hue_byya_y0hx
    #define REG_CM2_ENH_COEFF4_H04      0x124   // default 32'H0
                                                  // [ 7: 0] : hue_byya_y1hx / [15: 8] : hue_byya_y2hx
                                                  // [23:16] : hue_byya_y3hx / [31:24] : hue_byya_y4hx

////========= NODE 5 COEFFICIENT ==============////

    #define REG_CM2_ENH_COEFF0_H05      0x128   // default 32'H0
                                                  // [ 7: 0] : luma_byh_hx   / [15: 8] : sat_byhs_s0hx
                                                  // [23:16] : sat_byhs_s0hx / [31:24] : sat_byhs_s2hx
    #define REG_CM2_ENH_COEFF1_H05      0x129   // default 32'H0
                                                  // [ 7: 0] : hue_byh_hx   / [15: 8] : hue_byy_y0hx
                                                  // [23:16] : hue_byy_y1hx / [31:24] : hue_byy_y2hx
    #define REG_CM2_ENH_COEFF2_H05      0x12a   // default 32'H0
                                                  // [ 7: 0] : hue_byy_y3hx / [15: 8] : hue_byy_y4hx
                                                  // [23:16] : hue_bys_s0hx / [31:24] : hue_bys_s1hx
    #define REG_CM2_ENH_COEFF3_H05      0x12b   // default 32'H0
                                                  // [ 7: 0] : hue_bys_s2hx / [15: 8] : hue_bys_s3hx
                                                  // [23:16] : hue_bys_s4hx / [31:24] : hue_byya_y0hx
    #define REG_CM2_ENH_COEFF4_H05      0x12c   // default 32'H0
                                                  // [ 7: 0] : hue_byya_y1hx / [15: 8] : hue_byya_y2hx
                                                  // [23:16] : hue_byya_y3hx / [31:24] : hue_byya_y4hx

////========= NODE 6 COEFFICIENT ==============////

    #define REG_CM2_ENH_COEFF0_H06      0x130   // default 32'H0
                                                  // [ 7: 0] : luma_byh_hx   / [15: 8] : sat_byhs_s0hx
                                                  // [23:16] : sat_byhs_s0hx / [31:24] : sat_byhs_s2hx
    #define REG_CM2_ENH_COEFF1_H06      0x131   // default 32'H0
                                                  // [ 7: 0] : hue_byh_hx   / [15: 8] : hue_byy_y0hx
                                                  // [23:16] : hue_byy_y1hx / [31:24] : hue_byy_y2hx
    #define REG_CM2_ENH_COEFF2_H06      0x132   // default 32'H0
                                                  // [ 7: 0] : hue_byy_y3hx / [15: 8] : hue_byy_y4hx
                                                  // [23:16] : hue_bys_s0hx / [31:24] : hue_bys_s1hx
    #define REG_CM2_ENH_COEFF3_H06      0x133   // default 32'H0
                                                  // [ 7: 0] : hue_bys_s2hx / [15: 8] : hue_bys_s3hx
                                                  // [23:16] : hue_bys_s4hx / [31:24] : hue_byya_y0hx
    #define REG_CM2_ENH_COEFF4_H06      0x134   // default 32'H0
                                                  // [ 7: 0] : hue_byya_y1hx / [15: 8] : hue_byya_y2hx
                                                  // [23:16] : hue_byya_y3hx / [31:24] : hue_byya_y4hx

////========= NODE 7 COEFFICIENT ==============////

    #define REG_CM2_ENH_COEFF0_H07      0x138   // default 32'H0
                                                  // [ 7: 0] : luma_byh_hx   / [15: 8] : sat_byhs_s0hx
                                                  // [23:16] : sat_byhs_s0hx / [31:24] : sat_byhs_s2hx
    #define REG_CM2_ENH_COEFF1_H07      0x139   // default 32'H0
                                                  // [ 7: 0] : hue_byh_hx   / [15: 8] : hue_byy_y0hx
                                                  // [23:16] : hue_byy_y1hx / [31:24] : hue_byy_y2hx
    #define REG_CM2_ENH_COEFF2_H07      0x13a   // default 32'H0
                                                  // [ 7: 0] : hue_byy_y3hx / [15: 8] : hue_byy_y4hx
                                                  // [23:16] : hue_bys_s0hx / [31:24] : hue_bys_s1hx
    #define REG_CM2_ENH_COEFF3_H07      0x13b   // default 32'H0
                                                  // [ 7: 0] : hue_bys_s2hx / [15: 8] : hue_bys_s3hx
                                                  // [23:16] : hue_bys_s4hx / [31:24] : hue_byya_y0hx
    #define REG_CM2_ENH_COEFF4_H07      0x13c   // default 32'H0
                                                  // [ 7: 0] : hue_byya_y1hx / [15: 8] : hue_byya_y2hx
                                                  // [23:16] : hue_byya_y3hx / [31:24] : hue_byya_y4hx

////========= NODE 8 COEFFICIENT ==============////

    #define REG_CM2_ENH_COEFF0_H08      0x140   // default 32'H0
                                                  // [ 7: 0] : luma_byh_hx   / [15: 8] : sat_byhs_s0hx
                                                  // [23:16] : sat_byhs_s0hx / [31:24] : sat_byhs_s2hx
    #define REG_CM2_ENH_COEFF1_H08      0x141   // default 32'H0
                                                  // [ 7: 0] : hue_byh_hx   / [15: 8] : hue_byy_y0hx
                                                  // [23:16] : hue_byy_y1hx / [31:24] : hue_byy_y2hx
    #define REG_CM2_ENH_COEFF2_H08      0x142   // default 32'H0
                                                  // [ 7: 0] : hue_byy_y3hx / [15: 8] : hue_byy_y4hx
                                                  // [23:16] : hue_bys_s0hx / [31:24] : hue_bys_s1hx
    #define REG_CM2_ENH_COEFF3_H08      0x143   // default 32'H0
                                                  // [ 7: 0] : hue_bys_s2hx / [15: 8] : hue_bys_s3hx
                                                  // [23:16] : hue_bys_s4hx / [31:24] : hue_byya_y0hx
    #define REG_CM2_ENH_COEFF4_H08      0x144   // default 32'H0
                                                  // [ 7: 0] : hue_byya_y1hx / [15: 8] : hue_byya_y2hx
                                                  // [23:16] : hue_byya_y3hx / [31:24] : hue_byya_y4hx

////========= NODE 9 COEFFICIENT ==============////

    #define REG_CM2_ENH_COEFF0_H09      0x148   // default 32'H0
                                                  // [ 7: 0] : luma_byh_hx   / [15: 8] : sat_byhs_s0hx
                                                  // [23:16] : sat_byhs_s0hx / [31:24] : sat_byhs_s2hx
    #define REG_CM2_ENH_COEFF1_H09      0x149   // default 32'H0
                                                  // [ 7: 0] : hue_byh_hx   / [15: 8] : hue_byy_y0hx
                                                  // [23:16] : hue_byy_y1hx / [31:24] : hue_byy_y2hx
    #define REG_CM2_ENH_COEFF2_H09      0x14a   // default 32'H0
                                                  // [ 7: 0] : hue_byy_y3hx / [15: 8] : hue_byy_y4hx
                                                  // [23:16] : hue_bys_s0hx / [31:24] : hue_bys_s1hx
    #define REG_CM2_ENH_COEFF3_H09      0x14b   // default 32'H0
                                                  // [ 7: 0] : hue_bys_s2hx / [15: 8] : hue_bys_s3hx
                                                  // [23:16] : hue_bys_s4hx / [31:24] : hue_byya_y0hx
    #define REG_CM2_ENH_COEFF4_H09      0x14c   // default 32'H0
                                                  // [ 7: 0] : hue_byya_y1hx / [15: 8] : hue_byya_y2hx
                                                  // [23:16] : hue_byya_y3hx / [31:24] : hue_byya_y4hx

////========= NODE 10 COEFFICIENT ==============////

    #define REG_CM2_ENH_COEFF0_H10      0x150   // default 32'H0
                                                  // [ 7: 0] : luma_byh_hx   / [15: 8] : sat_byhs_s0hx
                                                  // [23:16] : sat_byhs_s0hx / [31:24] : sat_byhs_s2hx
    #define REG_CM2_ENH_COEFF1_H10      0x151   // default 32'H0
                                                  // [ 7: 0] : hue_byh_hx   / [15: 8] : hue_byy_y0hx
                                                  // [23:16] : hue_byy_y1hx / [31:24] : hue_byy_y2hx
    #define REG_CM2_ENH_COEFF2_H10      0x152   // default 32'H0
                                                  // [ 7: 0] : hue_byy_y3hx / [15: 8] : hue_byy_y4hx
                                                  // [23:16] : hue_bys_s0hx / [31:24] : hue_bys_s1hx
    #define REG_CM2_ENH_COEFF3_H10      0x153   // default 32'H0
                                                  // [ 7: 0] : hue_bys_s2hx / [15: 8] : hue_bys_s3hx
                                                  // [23:16] : hue_bys_s4hx / [31:24] : hue_byya_y0hx
    #define REG_CM2_ENH_COEFF4_H10      0x154   // default 32'H0
                                                  // [ 7: 0] : hue_byya_y1hx / [15: 8] : hue_byya_y2hx
                                                  // [23:16] : hue_byya_y3hx / [31:24] : hue_byya_y4hx

////========= NODE 11 COEFFICIENT ==============////

    #define REG_CM2_ENH_COEFF0_H11      0x158   // default 32'H0
                                                  // [ 7: 0] : luma_byh_hx   / [15: 8] : sat_byhs_s0hx
                                                  // [23:16] : sat_byhs_s0hx / [31:24] : sat_byhs_s2hx
    #define REG_CM2_ENH_COEFF1_H11      0x159   // default 32'H0
                                                  // [ 7: 0] : hue_byh_hx   / [15: 8] : hue_byy_y0hx
                                                  // [23:16] : hue_byy_y1hx / [31:24] : hue_byy_y2hx
    #define REG_CM2_ENH_COEFF2_H11      0x15a   // default 32'H0
                                                  // [ 7: 0] : hue_byy_y3hx / [15: 8] : hue_byy_y4hx
                                                  // [23:16] : hue_bys_s0hx / [31:24] : hue_bys_s1hx
    #define REG_CM2_ENH_COEFF3_H11      0x15b   // default 32'H0
                                                  // [ 7: 0] : hue_bys_s2hx / [15: 8] : hue_bys_s3hx
                                                  // [23:16] : hue_bys_s4hx / [31:24] : hue_byya_y0hx
    #define REG_CM2_ENH_COEFF4_H11      0x15c   // default 32'H0
                                                  // [ 7: 0] : hue_byya_y1hx / [15: 8] : hue_byya_y2hx
                                                  // [23:16] : hue_byya_y3hx / [31:24] : hue_byya_y4hx

////========= NODE 12 COEFFICIENT ==============////

    #define REG_CM2_ENH_COEFF0_H12      0x160   // default 32'H0
                                                  // [ 7: 0] : luma_byh_hx   / [15: 8] : sat_byhs_s0hx
                                                  // [23:16] : sat_byhs_s0hx / [31:24] : sat_byhs_s2hx
    #define REG_CM2_ENH_COEFF1_H12      0x161   // default 32'H0
                                                  // [ 7: 0] : hue_byh_hx   / [15: 8] : hue_byy_y0hx
                                                  // [23:16] : hue_byy_y1hx / [31:24] : hue_byy_y2hx
    #define REG_CM2_ENH_COEFF2_H12      0x162   // default 32'H0
                                                  // [ 7: 0] : hue_byy_y3hx / [15: 8] : hue_byy_y4hx
                                                  // [23:16] : hue_bys_s0hx / [31:24] : hue_bys_s1hx
    #define REG_CM2_ENH_COEFF3_H12      0x163   // default 32'H0
                                                  // [ 7: 0] : hue_bys_s2hx / [15: 8] : hue_bys_s3hx
                                                  // [23:16] : hue_bys_s4hx / [31:24] : hue_byya_y0hx
    #define REG_CM2_ENH_COEFF4_H12      0x164   // default 32'H0
                                                  // [ 7: 0] : hue_byya_y1hx / [15: 8] : hue_byya_y2hx
                                                  // [23:16] : hue_byya_y3hx / [31:24] : hue_byya_y4hx

////========= NODE 13 COEFFICIENT ==============////

    #define REG_CM2_ENH_COEFF0_H13      0x168   // default 32'H0
                                                  // [ 7: 0] : luma_byh_hx   / [15: 8] : sat_byhs_s0hx
                                                  // [23:16] : sat_byhs_s0hx / [31:24] : sat_byhs_s2hx
    #define REG_CM2_ENH_COEFF1_H13      0x169   // default 32'H0
                                                  // [ 7: 0] : hue_byh_hx   / [15: 8] : hue_byy_y0hx
                                                  // [23:16] : hue_byy_y1hx / [31:24] : hue_byy_y2hx
    #define REG_CM2_ENH_COEFF2_H13      0x16a   // default 32'H0
                                                  // [ 7: 0] : hue_byy_y3hx / [15: 8] : hue_byy_y4hx
                                                  // [23:16] : hue_bys_s0hx / [31:24] : hue_bys_s1hx
    #define REG_CM2_ENH_COEFF3_H13      0x16b   // default 32'H0
                                                  // [ 7: 0] : hue_bys_s2hx / [15: 8] : hue_bys_s3hx
                                                  // [23:16] : hue_bys_s4hx / [31:24] : hue_byya_y0hx
    #define REG_CM2_ENH_COEFF4_H13      0x16c   // default 32'H0
                                                  // [ 7: 0] : hue_byya_y1hx / [15: 8] : hue_byya_y2hx
                                                  // [23:16] : hue_byya_y3hx / [31:24] : hue_byya_y4hx


/* Constraints
0)
  there are 16 regions totally. 8 regions are for hue adjustment, 8 regions are for sat adjustment.
  the hue range of the 16 regions can be set to overlap, but if overlap, the hue range(start and end) must be same.
  the 8 regions for hue adjustment should not overlap. if corresponding reg_hue_en_00 - 07 == 1
  the 8 regions for hue adjustment are defined by: (example are for region 0)
    a) hue:
        start: reg_hue_hue_shift_start_00[14:0]
        end:
        if reg_symmetry_en_00 == 0
        reg_hue_hue_shift_start_00[14:0] + (reg_hue_hue_shift_range_00[7:0]<<5)
        if reg_symmetry_en_00 == 1
        reg_hue_hue_shift_start_00[14:0] + (reg_hue_hue_shift_range_00[7:0]<<6)
    b) sat:
        start: reg_hue_sat_low_00
        end:   reg_hue_sat_high_00

  the 8 regions for sat adjustment should not overlap. if corresponding reg_sat_en_00 - 07 == 1
  the 8 regions for sat adjustment are defined by: (example are for region 0)
    a) hue: same as that for hue adjustment.
        start: reg_hue_hue_shift_start_00[14:0]
        end:
        if reg_symmetry_en_00 == 0
        reg_hue_hue_shift_start_00[14:0] + (reg_hue_hue_shift_range_00[7:0]<<5)
        if reg_symmetry_en_00 == 1
        reg_hue_hue_shift_start_00[14:0] + (reg_hue_hue_shift_range_00[7:0]<<6)
    b) sat:
        start: reg_sat_sat_low_00
        end:   reg_sat_sat_high_00

1)
  reg_hue_hue_shift_range_00[7:0]:
  reg_hue_hue_shift_range_01[7:0]:
  reg_hue_hue_shift_range_02[7:0]:
  reg_hue_hue_shift_range_03[7:0]:
  reg_hue_hue_shift_range_04[7:0]:
  reg_hue_hue_shift_range_05[7:0]:
  reg_hue_hue_shift_range_06[7:0]:
  reg_hue_hue_shift_range_07[7:0]:
  must be greater or equal than 8'd8, so as reg_hue_range_inv_regxx can be represented by 0.0000_0000_xxxx_xxxx_xxxx_xxxx

2)
  all regions of 0-7 should meet below requirement. below is just an example for region 7.
  (reg_hue_lum_high_07 - reg_hue_lum_low_07) >=
        (1<<reg_hue_lum_low_slope_07) + (1<<reg_hue_lum_high_slope_07)

  (reg_hue_sat_high_07 - reg_hue_sat_low_07) >=
        (1<<reg_hue_sat_low_slope_07) + (1<<reg_hue_sat_high_slope_07)

  (reg_sat_lum_high_07 - reg_sat_lum_low_07) >=
        (1<<reg_sat_lum_low_slope_07) + (1<<reg_sat_lum_high_slope_07)

  (reg_sat_sat_high_07 - reg_sat_sat_low_07) >=
        (1<<reg_sat_sat_low_slope_07) + (1<<reg_sat_sat_high_slope_07)

3)
  all of reg_hue_hue_shift_start_00[14:0] ~ 07[14:0] < 0x6000.
  only region 0 and 1 can exceed 360 degrees. ie:
    reg_hue_hue_shift_start_00 + (reg_hue_hue_shift_range_00<<5) can greater than 0x6000.
    reg_hue_hue_shift_start_01 + (reg_hue_hue_shift_range_01<<5) can greater than 0x6000.
  but below should be met:
    reg_hue_hue_shift_start_00 + (reg_hue_hue_shift_range_00<<5) < 0x8000. if reg_symmetry_en_00 == 0
    reg_hue_hue_shift_start_01 + (reg_hue_hue_shift_range_00<<5) < 0x8000. if reg_symmetry_en_00 == 0
    reg_hue_hue_shift_start_00 + (reg_hue_hue_shift_range_00<<6) < 0x8000. if reg_symmetry_en_00 == 1
    reg_hue_hue_shift_start_01 + (reg_hue_hue_shift_range_00<<6) < 0x8000. if reg_symmetry_en_00 == 1

  others could not exceed 360 degrees. ie:
    reg_hue_hue_shift_start_02(to 7) + (reg_hue_hue_shift_range_02 (to 7) <<5) < 0x6000. if reg_symmetry_en_02 (to 7) == 0.
    reg_hue_hue_shift_start_02(to 7) + (reg_hue_hue_shift_range_02 (to 7) <<6) < 0x6000. if reg_symmetry_en_02 (to 7) == 1.

4)
  reg_hue_gain_00[7:0] <= 0x80.
  reg_hue_gain_01[7:0] <= 0x80.
  reg_hue_gain_02[7:0] <= 0x80.
  reg_hue_gain_03[7:0] <= 0x80.
  reg_hue_gain_04[7:0] <= 0x80.
  reg_hue_gain_05[7:0] <= 0x80.
  reg_hue_gain_06[7:0] <= 0x80.
  reg_hue_gain_07[7:0] <= 0x80.

5)
  below registers can only have two setting: 00 and 01.
    reg_hue_central_en_00[1:0]  .. _07[1:0]
    reg_sat_central_en_00[1:0]  .. _07[1:0]

6)
  all reg_..._slope_00-07 should not be greater than 7, ie: maximum value is 7.
   for example: below is for region 0:
   reg_hue_lum_low_slope_00[3:0]  <= 7
   reg_hue_lum_high_slope_00[3:0] <= 7
   reg_hue_sat_low_slope_00[3:0]  <= 7
   reg_hue_sat_high_slope_00[3:0] <= 7
   reg_sat_lum_low_slope_00[3:0]  <= 7
   reg_sat_lum_high_slope_00[3:0] <= 7
   reg_sat_sat_low_slope_00[3:0]  <= 7
   reg_sat_sat_high_slope_00[3:0] <= 7
*/

// synopsys translate_off
// synopsys translate_on
//
// Closing file:  chroma_reg.h
//
//PWM port
#define VP_PWM_ADDR_PORT                           0x04de
#define VP_PWM_DATA_PORT                           0x04df
//
// Reading file:  vpu_pwm_reg.h
//
// synopsys translate_off
// synopsys translate_on

//Bit 31    reg_vpu_pwm0_inv, 1: invert the pwm signal, active low
//Bit 30    reg_vpu_pwm0_en
//Bit 29:16 reg_vpu_pwm0_v_end0
//Bit 15    reg_vpu_pwm0_vs_inv, 1: invert the input vsync polarity
//Bit 14    reg_vpu_pwm0_setting_latch_mode, 1: latch pwm0 setting at vsync
//Bit 13:0  reg_vpu_pwm0_v_start0
#define     VPU_PWM0_V0  0x0

//Bit 29:16 reg_vpu_pwm_v_end1
//Bit 13:0  reg_vpu_pwm_v_start1
#define     VPU_PWM0_V1  0x1

//Bit 29:16 reg_vpu_pwm_v_end2
//Bit 13:0  reg_vpu_pwm_v_start2
#define     VPU_PWM0_V2  0x2

//Bit 29:16 reg_vpu_pwm_v_end3
//Bit 13:0  reg_vpu_pwm_v_start3
#define     VPU_PWM0_V3  0x3

//Bit 29:16 reg_vpu_pwm_h_end0
//Bit 13:0  reg_vpu_pwm_h_start0
#define     VPU_PWM0_H0  0x4

//Bit 29:16 reg_vpu_pwm_h_end1
//Bit 13:0  reg_vpu_pwm_h_start1
#define     VPU_PWM0_H1  0x5

//Bit 29:16 reg_vpu_pwm_h_end2
//Bit 13:0  reg_vpu_pwm_h_start2
#define     VPU_PWM0_H2  0x6

//Bit 29:16 reg_vpu_pwm_h_end3
//Bit 13:0  reg_vpu_pwm_h_start3
#define     VPU_PWM0_H3  0x7

//Bit 31    reg_vpu_pwm1_inv, 1: invert the pwm signal, active low
//Bit 30    reg_vpu_pwm1_en
//Bit 29:16 reg_vpu_pwm1_v_end0
//Bit 15    reg_vpu_pwm1_vs_inv, 1: invert the input vsync polarity
//Bit 14    reg_vpu_pwm1_setting_latch_mode, 1: latch pwm setting at vsync
//Bit 13:0  reg_vpu_pwm1_v_start0
#define     VPU_PWM1_V0  0x8

//Bit 29:16 reg_vpu_pwm_v_end1
//Bit 13:0  reg_vpu_pwm_v_start1
#define     VPU_PWM1_V1  0x9

//Bit 29:16 reg_vpu_pwm_v_end2
//Bit 13:0  reg_vpu_pwm_v_start2
#define     VPU_PWM1_V2  0xa

//Bit 29:16 reg_vpu_pwm_v_end3
//Bit 13:0  reg_vpu_pwm_v_start3
#define     VPU_PWM1_V3  0xb

//Bit 29:16 reg_vpu_pwm_h_end0
//Bit 13:0  reg_vpu_pwm_h_start0
#define     VPU_PWM1_H0  0xc

//Bit 29:16 reg_vpu_pwm_h_end1
//Bit 13:0  reg_vpu_pwm_h_start1
#define     VPU_PWM1_H1  0xd

//Bit 29:16 reg_vpu_pwm_h_end2
//Bit 13:0  reg_vpu_pwm_h_start2
#define     VPU_PWM1_H2  0xe

//Bit 29:16 reg_vpu_pwm_h_end3
//Bit 13:0  reg_vpu_pwm_h_start3
#define     VPU_PWM1_H3  0xf

//Bit 31    reg_vpu_pwm2_inv, 1: invert the pwm signal, active low
//Bit 30    reg_vpu_pwm2_en
//Bit 29:16 reg_vpu_pwm2_v_end0
//Bit 15    reg_vpu_pwm2_vs_inv, 1: invert the input vsync polarity
//Bit 14    reg_vpu_pwm2_setting_latch_mode, 1: latch pwm setting at vsync
//Bit 13:0  reg_vpu_pwm2_v_start0
#define     VPU_PWM2_V0  0x10

//Bit 29:16 reg_vpu_pwm_v_end1
//Bit 13:0  reg_vpu_pwm_v_start1
#define     VPU_PWM2_V1  0x11

//Bit 29:16 reg_vpu_pwm_v_end2
//Bit 13:0  reg_vpu_pwm_v_start2
#define     VPU_PWM2_V2  0x12

//Bit 29:16 reg_vpu_pwm_v_end3
//Bit 13:0  reg_vpu_pwm_v_start3
#define     VPU_PWM2_V3  0x13

//Bit 29:16 reg_vpu_pwm_h_end0
//Bit 13:0  reg_vpu_pwm_h_start0
#define     VPU_PWM2_H0  0x14

//Bit 29:16 reg_vpu_pwm_h_end1
//Bit 13:0  reg_vpu_pwm_h_start1
#define     VPU_PWM2_H1  0x15

//Bit 29:16 reg_vpu_pwm_h_end2
//Bit 13:0  reg_vpu_pwm_h_start2
#define     VPU_PWM2_H2  0x16

//Bit 29:16 reg_vpu_pwm_h_end3
//Bit 13:0  reg_vpu_pwm_h_start3
#define     VPU_PWM2_H3  0x17

//Bit 29:16 reg_vpu_pwm_vsize_m1
//Bit 13:0  reg_vpu_pwm_hsize_m1
#define     VPU_PWM_HVSIZE_M1  0x40

//Bit 31    reg_regen_3dsync_en, 1: regenerate 3dsync by input 3dsync signal
//Bit 30    reg_out_3dsync_inv, 1: invert out 3d sync polarity
//Bit 29:16 reg_3dsync_det_hpos, detect input 3dsync polarity horizontal position
//Bit 13:0  reg_3dsync_det_vpos, detect input 3dsync polarity vertical position
#define     VPU_3DSYNC_CTRL    0x41

//Bit 29:16 reg_out_3dsync_hstart, regenerate 3dsync position
//Bit 13:0  reg_out_3dsync_vstart, regenerate 3dsync position
#define  	VPU_3DSYNC_HVSTART 0x42


#define  	VPU_3DSYNC_HVEND   0x43

//Bit 31    reg_regen_3dgls_en, 1: regenerate 3dgls by input 3dsync signal
//Bit 30    reg_out_3dgls_inv, 1: invert out 3d gls polarity
//Bit 29:16 reg_3dgls_det_hpos, detect input 3dgls polarity horizontal position
//Bit 13:0  reg_3dgls_det_vpos, detect input 3dgls polarity vertical position
#define     VPU_3DGLS_CTRL     0x44

//Bit 29:16 reg_out_3dgls_hstart, regenerate 3dgls position
//Bit 13:0  reg_out_3dgls_vstart, regenerate 3dgls position
#define  	VPU_3DGLS_HVSTART  0x45
#define  	VPU_3DGLS_HVEND    0x46
// synopsys translate_off
// synopsys translate_on
//
// Closing file:  vpu_pwm_reg.h
//
//8'he0~8'hff:  VX1_LVDS
//
// Reading file:  vx1_lvds_reg.h
//
// synopsys translate_off
// synopsys translate_on
// -----------------------------------------------
// CBUS_BASE:  VXLVS_CBUS_BASE = 0x04
// -----------------------------------------------
//8'h60~8'h7f
#define VXLVS_CTRL                                 0x04e0
//Bit 31: 1, reserved
//Bit     0, reg_vx1_lvds   default=0
#define VXLVS_BLANK_DATA                           0x04e1
//Bit 31:30, reserved
//Bit 29: 0, reg_blank_data
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// VX1 Register
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define VBO_SOFT_RST                               0x04e5
//Bit 31: 9, reserved
//Bit  8: 0, reg_vbo_softrst   vbyone software reset
#define VBO_GCLK_CTRL                              0x04e6
//Bit 31: 0, reg_vbo_gclk_ctrl  default=0
#define VBO_CTRL                                   0x04e7
//Bit 31: 0, reg_vbo_ctrl
#define VBO_VIN_CTRL                               0x04e8
//Bit 31:16, reg_vbo_act_vsize
//Bit 15: 0, reg_vbo_vin_ctrl
#define VBO_LANES                                  0x04e9
//Bit 31:16, reserved
//Bit 15: 0, reg_vbo_lanes
#define VBO_REGION01                               0x04ea
//Bit 31: 0, reg_vbo_region01
#define VBO_REGION23                               0x04eb
//Bit 31: 0, reg_vbo_region23
#define VBO_VBK_CTL                                0x04ec
//Bit 31: 0, reg_vbo_vblank_ctl
#define VBO_HBK_PXL_CTL                            0x04ed
//Bit 31:24, reserved
//Bit 23:16, reg_vbo_pixel_ctl
//Bit 15: 0, reg_vbo_hblank_ctl
#define VBO_LANE_SKEW                              0x04ee
//Bit 31: 0, reg_vbo_lane_skew
#define VBO_LANE_SWAP                              0x04ef
//Bit 31:24, reserved
//Bit 23:16, reg_vbo_lane_rev10
//Bit 15:11, reserved
//Bit 10: 0, reg_vbo_lane_swap
#define LVDS_CTRL                                  0x04f0
//Bit 31:14, reserved
//Bit 13: 8, reg_lvds_gclk_ctrl default=0
//Bit  7: 1, reserved
//Bit     0, reg_lvds_enable    default=0
#define LVDS_PACK_CNTL                             0x04f1
//Bit 31: 0, reg_lvds_pack_cntl
#define LVDS_CLK_VALUE                             0x04f2
//Bit 31: 0, reg_lvds_clk_val
#define LVDS_BIST_CTRL                             0x04f3
//Bit 31:13, reserved
//Bit 12: 8, reg_bist_tap_sel  default=0
//Bit  7: 1, reserved
//Bit     0, reg_bist_enable   default=0
#define LVDS_BIST_MUX_SEL0                         0x04f4
//Bit 31:24, reserved
//Bit 23: 0, reg_bist_mux_sel0
#define LVDS_BIST_MUX_SEL1                         0x04f5
//Bit 31:24, reserved
//Bit 23: 0, reg_bist_mux_sel1
#define LVDS_BIST_FIXED_VALUE                      0x04f6
//Bit 31: 0, reg_bist_fixed_val
#define VBO_RO_STATUS                              0x04f7
//Bit 31: 0, reg_vbo_status
// synopsys translate_off
// synopsys translate_on
//
// Closing file:  vx1_lvds_reg.h
//
//9'h100~9'h14f: HIST_DNLP
//
// Reading file:  hist_dnlp_reg.h
//
// synopsys translate_off
// synopsys translate_on
// ----------------------------
// HIST_SPL 0x2f
// ----------------------------
// -----------------------------------------------
// CBUS_BASE:  HIST_SPL_CBUS_BASE = 0x05
// -----------------------------------------------
//Bit 15    dnlp_en     1'b1:  enable dynamic non-linear processing
//BIT 14: 34bin only, 0&255 and other 32bins
//Bit 13:11 hist_din_sel, 00: from vdin0 dout,  1: from vdin1, 2: from nr dout, 3: di output, 4: vpp output, 5: vd1_din, 6: vd2_din, 7:osd1_dout
//Bit 10:8   hist_din_comp_mux, mux of [29:22], [19:12], [9:2] for hist detect
//Bit 7:5   hist_dnlp_low   the real pixels in each bins got by DNLP_HISTXX should multiple with 2^(dnlp_low+3)
//Bit 3:2   hist_din_sel    the source used for hist statistics.  00: from matrix0 dout,  01: from vsc_dout, 10: from matrix1 dout, 11: form matrix1 din
//Bit 1     hist_win_en     1'b0: hist used for full picture; 1'b1: hist used for pixels within hist window
//Bit 0     hist_spl_en     1'b0: disable hist readback; 1'b1: enable hist readback
#define HIST_CTRL                                  0x0500
//Bit 28:16 hist_hstart  horizontal start value to define hist window
//Bit 12:0  hist_hend    horizontal end value to define hist window
#define HIST_H_START_END                           0x0501
//Bit 28:16 hist_vstart  vertical start value to define hist window
//Bit 12:0  hist_vend    vertical end value to define hist window
#define HIST_V_START_END                           0x0502
//Bit 28:16 hist_pic_height  active input data window height
//Bit 12:0  hist_pic_width   active input data window width
#define HIST_PIC_SIZE                              0x0503
//Bit 15:8 hist_pix_white_value: >= this value will be white pixel
//Bit 7:0 hist_pix_black_value: <= this value will be black pixel
#define HIST_BLACK_WHITE_VALUE                     0x0504
//Bit 15:8  hist_max    maximum value
//Bit 7:0   hist_min    minimum value
//read only
#define HIST_MAX_MIN                               0x0505
//Bit 31:0  hist_spl_rd
//counts for the total luma value
//read only
#define HIST_SPL_VAL                               0x0506
//Bit 21:0  hist_spl_pixel_count
//counts for the total calculated pixels
//read only
#define HIST_SPL_PIX_CNT                           0x0507
//Bit 31:0  hist_chroma_sum
//counts for the total chroma value
//read only
#define HIST_CHROMA_SUM                            0x0508
//Bit 31:16 higher hist bin
//Bit 15:0  lower hist bin
//0-255 are splited to 64 bins evenly, and DNLP_HISTXX
//are the statistic number of pixels that within each bin.
//DNLP_HIST00[15:0]  counts for the first  bin
//DNLP_HIST00[31:16] counts for the second bin
//DNLP_HIST01[15:0]  counts for the third  bin
//DNLP_HIST01[31:16] counts for the fourth bin
//etc...
//read only
#define DNLP_HIST00                                0x0509
#define DNLP_HIST01                                0x050a
#define DNLP_HIST02                                0x050b
#define DNLP_HIST03                                0x050c
#define DNLP_HIST04                                0x050d
#define DNLP_HIST05                                0x050e
#define DNLP_HIST06                                0x050f
#define DNLP_HIST07                                0x0510
#define DNLP_HIST08                                0x0511
#define DNLP_HIST09                                0x0512
#define DNLP_HIST10                                0x0513
#define DNLP_HIST11                                0x0514
#define DNLP_HIST12                                0x0515
#define DNLP_HIST13                                0x0516
#define DNLP_HIST14                                0x0517
#define DNLP_HIST15                                0x0518
#define DNLP_HIST16                                0x0519
#define DNLP_HIST17                                0x051a
#define DNLP_HIST18                                0x051b
#define DNLP_HIST19                                0x051c
#define DNLP_HIST20                                0x051d
#define DNLP_HIST21                                0x051e
#define DNLP_HIST22                                0x051f
#define DNLP_HIST23                                0x0520
#define DNLP_HIST24                                0x0521
#define DNLP_HIST25                                0x0522
#define DNLP_HIST26                                0x0523
#define DNLP_HIST27                                0x0524
#define DNLP_HIST28                                0x0525
#define DNLP_HIST29                                0x0526
#define DNLP_HIST30                                0x0527
#define DNLP_HIST31                                0x0528
#define DNLP_HIST32                                0x0529
#define HIST_3DMODE                                0x052a
//Bit 31:24     bottom of region03 output value
//Bit 23:16     bottom of region02 output value
//Bit 15:8      bottom of region01 output value
//Bit 7:0       bottom of region00 output value
#define DNLP_CTRL_00                               0x052e
//Bit 31:24     bottom of region07 output value
//Bit 23:16     bottom of region06 output value
//Bit 15:8      bottom of region05 output value
//Bit 7:0       bottom of region04 output value
#define DNLP_CTRL_01                               0x052f
//Bit 31:24     bottom of region11 output value
//Bit 23:16     bottom of region10 output value
//Bit 15:8      bottom of region09 output value
//Bit 7:0       bottom of region08 output value
#define DNLP_CTRL_02                               0x0530
//Bit 31:24     bottom of region15 output value
//Bit 23:16     bottom of region14 output value
//Bit 15:8      bottom of region13 output value
//Bit 7:0       bottom of region12 output value
#define DNLP_CTRL_03                               0x0531
//Bit 31:24     bottom of region19 output value
//Bit 23:16     bottom of region18 output value
//Bit 15:8      bottom of region17 output value
//Bit 7:0       bottom of region16 output value
#define DNLP_CTRL_04                               0x0532
//Bit 31:24     bottom of region23 output value
//Bit 23:16     bottom of region22 output value
//Bit 15:8      bottom of region21 output value
//Bit 7:0       bottom of region20 output value
#define DNLP_CTRL_05                               0x0533
//Bit 31:24     bottom of region27 output value
//Bit 23:16     bottom of region26 output value
//Bit 15:8      bottom of region25 output value
//Bit 7:0       bottom of region24 output value
#define DNLP_CTRL_06                               0x0534
//Bit 31:24     bottom of region31 output value
//Bit 23:16     bottom of region30 output value
//Bit 15:8      bottom of region29 output value
//Bit 7:0       bottom of region28 output value
#define DNLP_CTRL_07                               0x0535
//Bit 31:24     bottom of region35 output value
//Bit 23:16     bottom of region34 output value
//Bit 15:8      bottom of region33 output value
//Bit 7:0       bottom of region32 output value
#define DNLP_CTRL_08                               0x0536
//Bit 31:24     bottom of region39 output value
//Bit 23:16     bottom of region38 output value
//Bit 15:8      bottom of region37 output value
//Bit 7:0       bottom of region36 output value
#define DNLP_CTRL_09                               0x0537
//Bit 31:24     bottom of region43 output value
//Bit 23:16     bottom of region42 output value
//Bit 15:8      bottom of region41 output value
//Bit 7:0       bottom of region40 output value
#define DNLP_CTRL_10                               0x0538
//Bit 31:24     bottom of region47 output value
//Bit 23:16     bottom of region46 output value
//Bit 15:8      bottom of region45 output value
//Bit 7:0       bottom of region44 output value
#define DNLP_CTRL_11                               0x0539
//Bit 31:24     bottom of region51 output value
//Bit 23:16     bottom of region50 output value
//Bit 15:8      bottom of region49 output value
//Bit 7:0       bottom of region48 output value
#define DNLP_CTRL_12                               0x053a
//Bit 31:24     bottom of region55 output value
//Bit 23:16     bottom of region54 output value
//Bit 15:8      bottom of region53 output value
//Bit 7:0       bottom of region52 output value
#define DNLP_CTRL_13                               0x053b
//Bit 31:24     bottom of region59 output value
//Bit 23:16     bottom of region58 output value
//Bit 15:8      bottom of region57 output value
//Bit 7:0       bottom of region56 output value
#define DNLP_CTRL_14                               0x053c
//Bit 31:24     bottom of region63 output value
//Bit 23:16     bottom of region62 output value
//Bit 15:8      bottom of region61 output value
//Bit 7:0       bottom of region60 output value
#define DNLP_CTRL_15                               0x053d
#define HIST_DNLP_GCLK_CTRL                        0x053f
// synopsys translate_off
// synopsys translate_on
//
// Closing file:  hist_dnlp_reg.h
//
//9'h160~9'h19f:    SOSD
//
// Reading file:  sosd_reg.h
//
//===========================================================================
//
//	Copyright @ 2012 by Amlogic Inc.
//	All Rights Reserved.
//
//  File name    sosd_reg.h
//  Description
//  Designer       Guanzhong Zheng
//  Created On     02/15/2014
//
//  Assumptions	 sosd_reg
//  Limitations	 none
//
//===========================================================================
//
//===========================================================================
// synopsys translate_off
// synopsys translate_on
// -----------------------------------------------
// CBUS_BASE:  OSD_CBUS_BASE = 0x05
// -----------------------------------------------
#define OSD_COLOR_RGBA0                            0x0540
#define OSD_COLOR_RGBA1                            0x0541
#define OSD_COLOR_RGBA2                            0x0542
#define OSD_COLOR_RGBA3                            0x0543
#define OSD_COLOR_RGBA4                            0x0544
#define OSD_COLOR_RGBA5                            0x0545
#define OSD_COLOR_RGBA6                            0x0546
#define OSD_COLOR_RGBA7                            0x0547
#define OSD_COLOR_RGBA8                            0x0548
#define OSD_COLOR_RGBA9                            0x0549
#define OSD_COLOR_RGBA10                           0x054a
#define OSD_COLOR_RGBA11                           0x054b
#define OSD_COLOR_RGBA12                           0x054c
#define OSD_COLOR_RGBA13                           0x054d
#define OSD_COLOR_RGBA14                           0x054e
#define OSD_COLOR_RGBA15                           0x054f
#define OSD_FONT_HCT0                              0x0550
#define OSD_FONT_HCT1                              0x0551
#define OSD_FONT_HCT2                              0x0552
#define OSD_FONT_HCT3                              0x0553
#define OSD_FONT_HCT4                              0x0554
#define OSD_FONT_HCT5                              0x0555
#define OSD_FONT_HCT6                              0x0556
#define OSD_FONT_HCT7                              0x0557
#define OSD_FONT_HCT8                              0x0558
#define OSD_FONT_HCT9                              0x0559
#define OSD_FONT_HCT10                             0x055a
#define OSD_FONT_HCT11                             0x055b
#define OSD_FONT_HCT12                             0x055c
#define OSD_FONT_HCT13                             0x055d
#define OSD_FONT_HCT14                             0x055e
#define OSD_FONT_HCT15                             0x055f
#define OSD_FONT_HCT16                             0x0560
#define OSD_FONT_HCT17                             0x0561
#define OSD_FONT_HCT18                             0x0562
#define OSD_FONT_HCT19                             0x0563
#define OSD_FONT_HCT20                             0x0564
#define OSD_FONT_HCT21                             0x0565
#define OSD_FONT_HCT22                             0x0566
#define OSD_FONT_HCT23                             0x0567
#define OSD_FONT_HCT24                             0x0568
#define OSD_FONT_HCT25                             0x0569
#define OSD_FONT_HCT26                             0x056a
#define OSD_FONT_HCT27                             0x056b
#define OSD_FONT_HCT28                             0x056c
#define OSD_FONT_HCT29                             0x056d
#define OSD_FONT_HCT30                             0x056e
#define OSD_FONT_HCT31                             0x056f
#define OSD_TXT_REGION_X                           0x0570
//[29:16] reg_osd_xend
//[13:0]  reg_osd_xstart
#define OSD_TXT_REGION_Y                           0x0571
//[29:16] reg_osd_yend
//[13:0]  reg_osd_ystart
#define OSD_3D_CTRL                                0x0572
//[31]    reg_osd_3d_xintlv
//[30]    reg_osd_3d_xintlv_phase
//[29:16] reg_osd_3d_xsplit
//[15]    reg_osd_3d_yintlv
//[14]    reg_osd_3d_yintlv_phase
//[13:0] reg_osd_3d_ysplit
#define OSD_FONT_REG0                              0x0573
//[31:30] reg_osd_font_xscal
//[29:24] reg_osd_font_xsize
//[23:22] reg_osd_font_yscal
//[21:16] reg_osd_font_ysize
//[14]    reg_osd_font_xintm
//[13]    reg_osd_font_yintm
//[12]    reg_osd_font_bgfginvert
//[11:0]  reg_osd_font_size
#define OSD_FONT_PAD                               0x0574
//[31:24] reg_osd_font_bound_xpad_left
//[23:16] reg_osd_font_bound_xpad_right
//[15:8]  reg_osd_font_bound_ypad_top
//[7:0]   reg_osd_font_bound_ypad_bot
#define OSD_CHAR_REG0                              0x0575
//[23:16] reg_osd_code_return
//[8]     reg_osd_align_mode
//[3:0]   reg_osd_align_bcindex
#define OSD_RAM_REG0                               0x0576
//[24]    ram_char_sel
//[23:16] ram_font_lib_max
//[11:0]  ram_char_num
#define OSD_PSIZE                                  0x0577
//[28:16] picture_ysize
//[12:0]  picture_xsize
//TODO temp add, need owner check
#define OSD_GCLK_CTRL                              0x0578
//[9:0] reg_osd_gclk_ctrl
// synopsys translate_off
// synopsys translate_on
//
// Closing file:  sosd_reg.h
//
//9'h180~9'h19f:    SRCIF
//
// Reading file:  vpu_srcif_regs.h
//
// synopsys translate_off
// synopsys translate_on
// -----------------------------------------------
// CBUS_BASE:  VPU_SRCIF_CBUS_BASE = 0x05
// -----------------------------------------------
#define VPU_SRCIF_CTRL                             0x0580
//Bit 31:27,        reserved
//Bit 26,           reg_srcif_dbg_sel
//Bit 25:16,        reg_tx_tim_meas_ofst        signed    , default = 0    : :
//Bit 15:14,        reg_tx_vsyn_sel             unsigned  , default = 0    : : tx vsyn output according the rx vsyn level or rx vsyn pulse
//Bit 13: 8,        reg_rx_drop_tim_ratio       unsigned  , default = 0x10 : :
//Bit  7: 5,        reg_in_level_inv            unsigned  , default = 0    : :
//Bit  4,           reg_rx_loop0_drop_en         unsigned  , default = 1    : :
//Bit  3,           reg_tx_loop0_fill_en         unsigned  , default = 1    : :
//Bit  2,           reg_in_level_sw_mask         unsigned  , default = 0    : :
//Bit  1,           reg_vsyn_out_en              unsigned  , default = 1    : :
//Bit  0,           reg_meas_cyc_mode            unsigned  , default = 1    : : keep cycle; 0 : keep time
#define VPU_SRCIF_RX_DROP_NUM                      0x0581
//Bit 31:16,        reg_rx_drop_num             unsigned  , default = 10   : :
//Bit 15: 0,        reg_rx_drop_line_len        unsigned  , default = 0    : :
#define VPU_SRCIF_LBUF_DEPTH                       0x0582
//Bit 31:16,        reg_vblank_hsize_lmt        unsigned  , default = 1920
//Bit 15:12,        reserved
//Bit 11: 0,        reg_lbuf_depth              unsigned  , default = 1024 : :
#define VPU_SRCIF_FLOW_THS                         0x0583
//Bit 31,           reserved
//Bit 30:16,        reg_fifo_underflow_ths      unsigned  , default = 2    :
//Bit 15,           reserved
//Bit 14: 0,        reg_fifo_overflow_ths       unsigned  , default = 6142 :
#define VPU_SRCIF_LOOP_FIFO_LMT                    0x0584
//Bit 31,           reserved
//Bit 30:16,        reg_loop0_fifo_lowlmt       unsigned  , default = 1500 : target fifo level low limit to keep stable
//Bit 15,           reserved
//Bit 14: 0,        reg_loop0_fifo_higlmt       unsigned  , default = 6500 : target fifo level up limit to keep stable
#define VPU_SRCIF_LOOP_FIFO_TARGET                 0x0585
//Bit 31,           reserved
//Bit 30:16,        reg_loop0_fifo_target       unsigned  , default = 4000 : target fifo level to keep stable
//Bit 15:14,        reserved
//Bit 13: 0,        reg_loop0_error_lmt         unsigned  , default = 2000 : error limit
#define VPU_SRCIF_LOOP_ERR_CORE                    0x0586
//Bit 31:29,        reserved
//Bit 28,           reg_loop0_error_core_mode     unsigned  , default = 1    : coring mode of the error, 0: soft coring; 1: hard coring
//Bit 27:16,        reg_loop0_error_core0       unsigned  , default = 700  : [neg_thd pos_thd] for coring the error
//Bit 15:12,        reserved
//Bit 11: 0,        reg_loop0_error_core1       unsigned  , default = 700  : [neg_thd pos_thd] for coring the error
#define VPU_SRCIF_LOOP_ERR_GAIN                    0x0587
//Bit 31:24,        reserved
//Bit 23:16,        reg_loop0_error_gain_lmt    unsigned  , default = 255  : gain to (fifo_level-target)
//Bit 15: 8,        reg_loop0_error_gain_raw    unsigned  , default = 255  : gain to (fifo_level-target)
//Bit  7: 0,        reg_loop0_error_gain_fin    unsigned  , default = 32   : gain to (fifo_level-target)
#define VPU_SRCIF_LOOP_ADJ_PAD_LMT                 0x0588
//Bit 31:28,        reserved
//Bit 27:16,        reg_loop0_adj_pad_lmt0      unsigned  , default = 1000 : [neg_lmt pos_lmt] for adj_pad negative and positive limit
//Bit 15:12,        reserved
//Bit 11: 0,        reg_loop0_adj_pad_lmt1      unsigned  , default = 1000 : [neg_lmt pos_lmt] for adj_pad negative and positive limit
#define VPU_SRCIF_LOOP_ADJ_PAD_CFG                 0x0589
//Bit 31:19,        reserved
//Bit 18:16,        reg_loop0_adj_pad_rs           unsigned  , default = 4    : right shift bits of product of loop0 accum and gain to get padding offset
//Bit 15: 8,        reg_loop0_adj_pad_gain         unsigned  , default = 64   : gain to loop0 accum to get padding ofset
//Bit  7,           reserved
//Bit  6: 4,        reg_loop0_adj_pad_pxgrouprs    unsigned  , default = 2    : adjustment of the sampelse will be multiple of (2^x), x=0~6
//Bit  3: 2,        reserved
//Bit  1,           reg_loop0_adj_pad_en            unsigned  , default = 1    :
//Bit  0,           reg_loop0_adj_pad_invert_sgn    unsigned  , default = 0    :
#define VPU_SRCIF_LOOP_ACCUM_OWT                   0x058a
//Bit 31:29,        reserved
//Bit 28,           reg_loop0_accum_owt_en       unsigned  , default = 0    : : enable overwrite Accum to reg_loop0_accum_owt_value
//Bit 27: 0,        reg_loop0_accum_owt_value   signed    , default = 0    : : overwrite accum with this value for reset or debug
#define VPU_SRCIF_VERR_STBDET_WIN                  0x058b
//Bit 31:14,        reserved
//Bit 13: 0,        reg_verr_stbdet_win0        unsigned  , default = 2048 : maximum using 4096 to do detection
#define VPU_SRCIF_RO_VERR_CLP_WIN                  0x058c
//Bit 31:14,        reserved
//Bit 13: 0,        ro_verr_clp_win0            unsigned  , default = 0    :
#define VPU_SRCIF_RO_VERR_ABS_WIN                  0x058d
//Bit 31:24,        reserved
//Bit 23: 0,        ro_verr_abs_win0            unsigned  , default = 0    :
#define VPU_SRCIF_RO_VERR_SGN_WIN                  0x058e
//Bit 31:24,        reserved
//Bit 23: 0,        ro_verr_sgn_win0            signed    , default = 0    :
#define VPU_SRCIF_RO_LOOP_ACCUM                    0x058f
//Bit 31:28,        reserved
//Bit 27: 0,        ro_loop0_accum              signed    , default = 0    : read-only register to line-out loop0_accum during v-blank region
#define SRCIF_WRAP_CTRL                            0x0590
#define SRCIF_WRAP_CNT0                            0x0591
#define SRCIF_WRAP_CNT1                            0x0592
#define SRCIF_WRAP_CNT2                            0x0593
#define SRCIF_WRAP_CNT3                            0x0594
#define SRCIF_WRAP_CNT4                            0x0595
#define SRCIF_WRAP_CNT5                            0x0596
#define SRCIF_WRAP_CNT6                            0x0597
#define SRCIF_WRAP_CTRL1                           0x0598
#define SRCIF_WRAP_STATUS                          0x0599
#define SRCIF_RO_CLK_MUX_CHG                       0x059a
// synopsys translate_off
// synopsys translate_on
//
// Closing file:  vpu_srcif_regs.h
//
// synopsys translate_off
// synopsys translate_on
//
// Closing file:  vpu_reg.h
//
//`include "hdmirx_apb.h"
//`include "hdmitx_apb.h"
// synopsys translate_off
// synopsys translate_on
//
// Closing file:  ./register_map.h
//

#endif // REGISTER_H

